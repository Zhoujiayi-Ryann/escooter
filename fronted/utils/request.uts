// HTTP 请求工具类
const BASE_URL = 'https://aadujkrrrwxp.sealoshzh.site/api';

// 存储 token 的 key
const TOKEN_KEY = 'token';

// 定义接口返回类型
interface ApiResponse<T> {
    code: number;
    msg: string;
    data: T;
}

// 定义登录响应数据类型
interface LoginResponseData {
    user_id: number;
    username: string;
    token: string;
}

// 定义注册响应数据类型
interface RegisterResponseData {
    user_id: number;
    username: string;
    email: string;
}

// 定义滑板车数据类型
interface Scooter {
    scooter_id: number;
    location_lat: number;
    location_lng: number;
    battery_level: number;
    status: string;
    price: number;
}

// 定义订单创建请求类型
interface CreateOrderRequest {
    user_id: number;
    scooter_id: number;
    pickup_address: string;
    start_time: string; // ISO 格式的日期时间字符串
    end_time: string;   // ISO 格式的日期时间字符串
}

// 定义订单响应类型
interface OrderResponse {
    order_id: number;
    user_id: number;
    scooter_id: number;
    start_time: string;
    end_time: string;
    cost: number;
    pickup_address: string;
    status: string;
}

// 定义订单详情的滑板车信息类型
interface ScooterInfo {
    latitude: number;
    longitude: number;
    battery_level: number;
    price: number;
}

// 定义订单详情响应类型
interface OrderDetailResponse {
    order_id: number;
    user_id: number;
    scooter_id: number;
    start_time: string;
    end_time: string;
    cost: number;
    pickup_address: string;
    status: string;
    scooter_info: ScooterInfo;
}

// 定义支付订单响应类型
interface PayOrderResponse {
    order_id: number;
    status: string;
}

// 获取存储的 token
export function getToken(): string {
    const token = uni.getStorageSync(TOKEN_KEY);
    return token || '';
}

// 设置 token
export function setToken(token: string) {
    uni.setStorageSync(TOKEN_KEY, token);
}

// 清除 token
export function removeToken() {
    uni.removeStorageSync(TOKEN_KEY);
}

// HTTP 请求封装
export function request<T>(options: {
    url: string,
    method?: 'GET' | 'POST' | 'PUT' | 'DELETE',
    data?: any,
    needToken?: boolean
}): Promise<ApiResponse<T>> {
    return new Promise((resolve, reject) => {
        const token = getToken();
        const header: any = {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
        };
        
        // 如果需要 token 且 token 存在，则添加到请求头
        if (options.needToken && token) {
            header.token = token;
        }

        uni.request({
            url: BASE_URL + options.url,
            method: options.method || 'GET',
            data: options.data,
            header: header,
            withCredentials: true, // 允许发送 cookie
            success: (res: any) => {
                // 处理 401 未授权的情况
                if (res.statusCode === 401) {
                    // 清除 token
                    removeToken();
                    // 跳转到登录页
                    uni.redirectTo({
                        url: '/pages/login/login'
                    });
                    reject(new Error('Unauthorized'));
                    return;
                }
                resolve(res.data);
            },
            fail: (err: any) => {
                console.error('请求失败:', err);
                reject(err);
            }
        });
    });
}

// API 接口封装
export const api = {
    // 用户登录
    login(data: { username: string, password: string }): Promise<ApiResponse<LoginResponseData>> {
        return request<LoginResponseData>({
            url: '/users/login',
            method: 'POST',
            data: data
        });
    },

    // 用户注册
    register(data: { 
        username: string, 
        password: string, 
        email: string, 
        phone_number: string
    }): Promise<ApiResponse<RegisterResponseData>> {
        return request<RegisterResponseData>({
            url: '/users/register',
            method: 'POST',
            data: data
        });
    },

    // =========== 滑板车相关接口 ===========

    /**
     * 获取所有可用的滑板车
     * @returns 可用滑板车列表
     */
    getScooters(): Promise<ApiResponse<Scooter[]>> {
        return request<Scooter[]>({
            url: '/scooters',
            method: 'GET',
            needToken: true // 需要登录权限
        });
    },

    /**
     * 获取指定滑板车的详细信息
     * @param scooterId 滑板车ID
     * @returns 滑板车详细信息
     */
    getScooterById(scooterId: number): Promise<ApiResponse<Scooter>> {
        return request<Scooter>({
            url: `/scooters/${scooterId}`,
            method: 'GET',
            needToken: true // 需要登录权限
        });
    },

    // =========== 订单相关接口 ===========

    /**
     * 创建订单
     * @param data 创建订单请求数据
     * @returns 创建的订单信息
     */
    createOrder(data: CreateOrderRequest): Promise<ApiResponse<OrderResponse>> {
        return request<OrderResponse>({
            url: '/create_orders',
            method: 'POST',
            data: data,
            needToken: true // 需要登录权限
        });
    },

    /**
     * 获取订单详情
     * @param orderId 订单ID
     * @returns 订单详情，包含滑板车信息
     */
    getOrderDetail(orderId: number): Promise<ApiResponse<OrderDetailResponse>> {
        return request<OrderDetailResponse>({
            url: `/orders/${orderId}`,
            method: 'GET',
            needToken: true // 需要登录权限
        });
    },

    /**
     * 支付订单
     * @param orderId 订单ID
     * @returns 支付结果
     */
    payOrder(orderId: number): Promise<ApiResponse<PayOrderResponse>> {
        return request<PayOrderResponse>({
            url: `/orders/${orderId}/pay`,
            method: 'POST',
            needToken: true // 需要登录权限
        });
    }
} as const;

/* 
// ================== API 使用示例 ==================

// 1. 用户登录示例
api.login({
    username: 'user123',
    password: 'password123'
}).then(res => {
    if (res.code === 0) {
        // 登录成功，保存token
        setToken(res.data.token);
        console.log('登录成功:', res.data);
    } else {
        // 登录失败
        console.error('登录失败:', res.msg);
    }
}).catch(err => {
    console.error('请求异常:', err);
});

// 2. 获取所有可用滑板车示例
api.getScooters().then(res => {
    if (res.code === 0) {
        // 获取成功
        const scooters = res.data;
        console.log('可用滑板车:', scooters);
        // 在地图上显示滑板车位置等操作
    } else {
        // 获取失败
        console.error('获取滑板车失败:', res.msg);
    }
}).catch(err => {
    console.error('请求异常:', err);
});

// 3. 创建订单示例
const orderData: CreateOrderRequest = {
    user_id: 1,
    scooter_id: 2,
    pickup_address: '上海市浦东新区xx路xx号',
    start_time: new Date().toISOString(), // 当前时间
    end_time: new Date(Date.now() + 3600000).toISOString() // 一小时后
};

api.createOrder(orderData).then(res => {
    if (res.code === 0) {
        // 订单创建成功
        const order = res.data;
        console.log('订单创建成功:', order);
        // 跳转到支付页面
        uni.navigateTo({
            url: `/pages/payment/payment?orderId=${order.order_id}`
        });
    } else {
        // 创建失败
        console.error('创建订单失败:', res.msg);
    }
}).catch(err => {
    console.error('请求异常:', err);
});

// 4. 支付订单示例
api.payOrder(123).then(res => {
    if (res.code === 0) {
        // 支付成功
        console.log('支付成功:', res.data);
        // 跳转到订单详情页
        uni.navigateTo({
            url: `/pages/order/detail?orderId=${res.data.order_id}`
        });
    } else {
        // 支付失败
        console.error('支付失败:', res.msg);
    }
}).catch(err => {
    console.error('请求异常:', err);
});

// 5. 获取订单详情示例
api.getOrderDetail(123).then(res => {
    if (res.code === 0) {
        // 获取成功
        const orderDetail = res.data;
        console.log('订单详情:', orderDetail);
        // 展示订单信息和滑板车位置
    } else {
        // 获取失败
        console.error('获取订单详情失败:', res.msg);
    }
}).catch(err => {
    console.error('请求异常:', err);
});

*/ 