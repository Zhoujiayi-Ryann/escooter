import { ref } from 'vue';
import { showToast } from 'vant';
import { userApi } from '@/utils/api/user';
const __sfc__ = defineComponent({
    __name: 'change_password',
    setup(__props): any | null {
        const __ins = getCurrentInstance()!;
        const _ctx = __ins.proxy as InstanceType<typeof __sfc__>;
        const _cache = __ins.renderCache;
        const oldPassword = ref('');
        const newPassword = ref('');
        const confirmPassword = ref('');
        const showOld = ref(false);
        const showNew = ref(false);
        const showConfirm = ref(false);
        const showKeyboard = ref(false);
        const currentField = ref('');
        const loading = ref(false);
        const focus = (field) => {
            currentField.value = field;
            showKeyboard.value = true;
        };
        const toggle = (field) => {
            if (field === 'old')
                showOld.value = !showOld.value;
            if (field === 'new')
                showNew.value = !showNew.value;
            if (field === 'confirm')
                showConfirm.value = !showConfirm.value;
        };
        const onInput = (val) => {
            if (currentField.value === 'old' && oldPassword.value.length < 15) {
                oldPassword.value += val;
            }
            if (currentField.value === 'new' && newPassword.value.length < 15) {
                newPassword.value += val;
            }
            if (currentField.value === 'confirm' && confirmPassword.value.length < 15) {
                confirmPassword.value += val;
            }
        };
        const onDelete = () => {
            if (currentField.value === 'old')
                oldPassword.value = oldPassword.value.slice(0, -1);
            if (currentField.value === 'new')
                newPassword.value = newPassword.value.slice(0, -1);
            if (currentField.value === 'confirm')
                confirmPassword.value = confirmPassword.value.slice(0, -1);
        };
        const submitChange = async (): Promise<ToastWrapperInstance | undefined> => {
            if (!oldPassword.value || !newPassword.value || !confirmPassword.value) {
                return showToast('Please complete all fields');
            }
            if (newPassword.value !== confirmPassword.value) {
                return showToast('Passwords do not match');
            }
            const userId = userApi.getUserId();
            if (!userId || isNaN(userId)) {
                return showToast('Not logged in');
            }
            loading.value = true;
            try {
                const res = await userApi.changePassword(userId, {
                    oldPassword: oldPassword.value,
                    newPassword: newPassword.value,
                });
                if (res.code === 1) {
                    showToast('Password changed successfully');
                    setTimeout(() => goBack(), 1500);
                }
                else {
                    showToast(res.msg || 'Failed to change password');
                }
            }
            catch (err: any) {
                console.error('Change password error:', err);
                showToast('Network error');
            }
            finally {
                loading.value = false;
            }
        };
        const goBack = () => {
            const pages = getCurrentPages();
            if (pages.length > 1)
                uni.navigateBack();
            else
                uni.reLaunch({ url: '/pages/settings/change/change' });
        };
        return (): any | null => {
            const _component_van_icon = resolveComponent("van-icon");
            const _component_van_button = resolveComponent("van-button");
            const _component_van_number_keyboard = resolveComponent("van-number-keyboard");
            return createElementVNode("view", utsMapOf({ class: "change-password-page" }), [
                createElementVNode("view", utsMapOf({
                    class: "close-btn",
                    onClick: goBack
                }), [
                    createVNode(_component_van_icon, utsMapOf({
                        name: "arrow-left",
                        class: "close-icon"
                    }))
                ]),
                createElementVNode("view", utsMapOf({ class: "header" }), [
                    createVNode(_component_van_icon, utsMapOf({
                        class: "title-icon",
                        name: "lock",
                        size: "50",
                        color: "#007aff"
                    })),
                    createElementVNode("text", utsMapOf({ class: "title" }), "Change Password")
                ]),
                createElementVNode("view", utsMapOf({
                    class: "input-card",
                    onClick: () => { focus('old'); }
                }), [
                    createVNode(_component_van_icon, utsMapOf({
                        name: "passed",
                        size: "20"
                    })),
                    createElementVNode("input", utsMapOf({
                        type: showOld.value ? 'text' : 'password',
                        modelValue: oldPassword.value,
                        onInput: ($event: InputEvent) => { (oldPassword).value = $event.detail.value; },
                        placeholder: "Enter current password",
                        readonly: ""
                    }), null, 40 /* PROPS, NEED_HYDRATION */, ["type", "modelValue", "onInput"]),
                    createVNode(_component_van_icon, utsMapOf({
                        name: showOld.value ? 'eye-o' : 'closed-eye',
                        onClick: withModifiers(() => { toggle('old'); }, ["stop"])
                    }), null, 8 /* PROPS */, ["name", "onClick"])
                ], 8 /* PROPS */, ["onClick"]),
                createElementVNode("view", utsMapOf({
                    class: "input-card",
                    onClick: () => { focus('new'); }
                }), [
                    createVNode(_component_van_icon, utsMapOf({
                        name: "edit",
                        size: "20"
                    })),
                    createElementVNode("input", utsMapOf({
                        type: showNew.value ? 'text' : 'password',
                        modelValue: newPassword.value,
                        onInput: ($event: InputEvent) => { (newPassword).value = $event.detail.value; },
                        placeholder: "Enter new password",
                        readonly: ""
                    }), null, 40 /* PROPS, NEED_HYDRATION */, ["type", "modelValue", "onInput"]),
                    createVNode(_component_van_icon, utsMapOf({
                        name: showNew.value ? 'eye-o' : 'closed-eye',
                        onClick: withModifiers(() => { toggle('new'); }, ["stop"])
                    }), null, 8 /* PROPS */, ["name", "onClick"])
                ], 8 /* PROPS */, ["onClick"]),
                createElementVNode("view", utsMapOf({
                    class: "input-card",
                    onClick: () => { focus('confirm'); }
                }), [
                    createVNode(_component_van_icon, utsMapOf({
                        name: "shield-o",
                        size: "20"
                    })),
                    createElementVNode("input", utsMapOf({
                        type: showConfirm.value ? 'text' : 'password',
                        modelValue: confirmPassword.value,
                        onInput: ($event: InputEvent) => { (confirmPassword).value = $event.detail.value; },
                        placeholder: "Confirm new password",
                        readonly: ""
                    }), null, 40 /* PROPS, NEED_HYDRATION */, ["type", "modelValue", "onInput"]),
                    createVNode(_component_van_icon, utsMapOf({
                        name: showConfirm.value ? 'eye-o' : 'closed-eye',
                        onClick: withModifiers(() => { toggle('confirm'); }, ["stop"])
                    }), null, 8 /* PROPS */, ["name", "onClick"])
                ], 8 /* PROPS */, ["onClick"]),
                createVNode(_component_van_button, utsMapOf({
                    class: "save-btn",
                    type: "primary",
                    block: "",
                    onClick: submitChange,
                    loading: loading.value
                }), utsMapOf({
                    default: withSlotCtx((): any[] => [" Save New Password "]),
                    _: 1 /* STABLE */
                }), 8 /* PROPS */, ["loading"]),
                createVNode(_component_van_number_keyboard, utsMapOf({
                    show: showKeyboard.value,
                    "extra-key": ".",
                    "close-button-text": "Done",
                    onInput: onInput,
                    onDelete: onDelete,
                    onBlur: () => { showKeyboard.value = false; }
                }), null, 8 /* PROPS */, ["show", "onBlur"])
            ]);
        };
    }
});
export default __sfc__;
const GenPagesSettingsChangePasswordChangePasswordStyles = [utsMapOf([["change-password-page", padStyleMapOf(utsMapOf([["paddingTop", "40rpx"], ["paddingRight", "40rpx"], ["paddingBottom", "40rpx"], ["paddingLeft", "40rpx"], ["backgroundImage", "linear-gradient(to bottom, #e0f0ff, #ffffff)"], ["backgroundColor", "rgba(0,0,0,0)"], ["display", "flex"], ["flexDirection", "column"]]))], ["close-btn", padStyleMapOf(utsMapOf([["position", "absolute"], ["top", "50rpx"], ["left", "50rpx"], ["display", "flex"], ["alignItems", "center"], ["justifyContent", "center"], ["zIndex", 10], ["backgroundColor", "#ffffff"], ["borderRadius", "45rpx"], ["boxShadow", "0 8px 20px rgba(0, 0, 0, 0.08)"], ["width", "90rpx"], ["height", "90rpx"]]))], ["close-icon", padStyleMapOf(utsMapOf([["fontSize", "50rpx"], ["color", "#3b88c3"]]))], ["header", padStyleMapOf(utsMapOf([["display", "flex"], ["alignItems", "center"], ["marginTop", 120], ["marginBottom", "100rpx"], ["gap", "25rpx"]]))], ["title", padStyleMapOf(utsMapOf([["fontSize", "60rpx"], ["fontWeight", "bold"], ["marginLeft", "20rpx"], ["color", "#007aff"]]))], ["title-icon", padStyleMapOf(utsMapOf([["fontSize", "60rpx"], ["fontWeight", "bold"], ["marginLeft", "20rpx"], ["color", "#007aff"]]))], ["input-card", padStyleMapOf(utsMapOf([["backgroundImage", "none"], ["backgroundColor", "#ffffff"], ["borderRadius", "50rpx"], ["paddingTop", "40rpx"], ["paddingRight", "40rpx"], ["paddingBottom", "40rpx"], ["paddingLeft", "40rpx"], ["display", "flex"], ["flexDirection", "row"], ["alignItems", "center"], ["justifyContent", "space-between"], ["boxShadow", "0 8px 20px rgba(0, 0, 0, 0.08)"], ["marginBottom", "30rpx"]]))], ["save-btn", padStyleMapOf(utsMapOf([["marginTop", "40rpx"], ["height", "100rpx"], ["fontSize", "30rpx"], ["backgroundImage", "linear-gradient(to right, #82b1ff, #007aff)"], ["backgroundColor", "rgba(0,0,0,0)"], ["color", "#FFFFFF"], ["borderRadius", "70rpx"], ["boxShadow", "0 4px 10px rgba(0, 122, 255, 0.3)"]]))]])];
