<template>
	<view>
		<van-floating-panel
		v-model:height="height"
		:anchors="anchors">
			<view class="instruction">
				<text>Rent E-scooters</text>
			</view>
			<van-cell-group class="list-container">
				<van-cell
				v-for="scooter in scooters" 
				:key="scooter.id"
				:class="{'selected': selected === scooter.id}"
				@click="selectEscooter(scooter.id)">
					<template #title>
						<view class="cell-content">
							<text class="scooter-id">{{scooter.id}}</text>
							<text class="battery">{{scooter.battery}}%</text>
						</view>
					</template>
					<template #label>
						<view v-if="selected === scooter.id" class="detail">
							<text>Status: {{scooter.status}}</text>
							<text>Price: ï¿¡{{scooter.price}}</text>
						</view>
					</template>
				</van-cell>
			</van-cell-group>
			<view class="next-button-area">
				<van-button
				round
				type="success"
				:disabled="selected === null"
				@click="nextStep">
				{{ selected === null ? 'Choose An E-scooter' : 'Next' }}
				</van-button>
			</view>
		</van-floating-panel>
		<map
		id="myMap"
		:longitude="mapCenter.longitude"
		:latitude="mapCenter.latitude"
		:style="{ width: windowWidth + 'px', height: windowHeight + 'px' }"
		:show-location="true"
		:markers="markers"
		:rotate="direction"
		:scale="scale">
		</map>
	</view>
</template>

<script>
	export default {
		data() {
			return {
				longitude: 116.39742,
				latitude: 39.909,
				windowWidth: 0,
				windowHeight: 0,
				markers: [] as Array<{
					id: string;
					latitude: number;
					longitude: number;
					width: number;
					height: number;
					callout: {
						content: string;
						display: 'ALWAYS' | 'BYCLICK';
					};
				}>,
				direction: 0,
				scale: 16,
				height: 60,
				anchors: [60, 0],
				selected: null,
				mapCenter: {
					longitude: 116.39742,
					latitude: 39.909
				},
				scooters: [
					{
						id: 'A001',
						location_lat: 39.909,
						location_lng: 116.397,
						battery: 85,
						status: 'Available',
						price: 1.5
					},
					{
						id: 'A002', 
						location_lat: 39.908,
						location_lng: 116.398,
						battery: 92,
						status: 'Available',
						price: 1.5
					},
					{
						id: 'A003',
						location_lat: 39.907,
						location_lng: 116.396,
						battery: 45,
						status: 'Low Battery',
						price: 1.2
					},
					{
						id: 'A004',
						location_lat: 39.910,
						location_lng: 116.395,
						battery: 76,
						status: 'Available',
						price: 1.5
					},
					{
						id: 'A005',
						location_lat: 39.911,
						location_lng: 116.394,
						battery: 88,
						status: 'Available', 
						price: 1.5
					}
				]
			};
		},
		mounted() {
			this.getLocation();
			this.startCompass();
			this.updateMarkers();
		},
		onReady() {
			this.setHeight();
			this.setWidth();
			this.getAnchors();
		},
		methods: {
			getLocation() {
				uni.getLocation({
					type: 'gcj02',
					success: (res) => {
						this.longitude = res.longitude;
						this.latitude = res.latitude;
						this.mapCenter.longitude = res.longitude;
						this.mapCenter.latitude = res.latitude;
					},
					fail: (err) => {
						console.log(err);
						uni.showToast({
							title: 'Fail to locate.',
							icon: 'none',
							duration: 2000
						});
					}
				});
			},
			setHeight() {
				this.windowHeight = uni.getSystemInfoSync().windowHeight;
			},
			setWidth() {
				this.windowWidth = uni.getSystemInfoSync().windowWidth;
			},
			startCompass() {
				uni.onCompassChange((res) => {
					this.direction = res.direction;
				});
			},
			getAnchors() {
				this.anchors = [
					60,
					Math.round(0.7 * this.windowHeight)
				];
			},
			updateMarkers() {
				this.markers = this.scooters.map(scooter => ({
					id: scooter.id,
					latitude: scooter.location_lat,
					longitude: scooter.location_lng,
					width: 32,
					height: 32,
					callout: {
						content: `Scooter ${scooter.id}`,
						display: this.selected === scooter.id ? 'ALWAYS' : 'BYCLICK'
					}
				}));
			},
			selectEscooter(id) {
				if (this.selected === id) {
					this.selected = null;
					this.mapCenter.longitude = this.longitude;
					this.mapCenter.latitude = this.latitude;
				} else {
					this.selected = id;
					const selectedScooter = this.scooters.find(s => s.id === id);
					if (selectedScooter) {
						this.mapCenter.longitude = selectedScooter.location_lng;
						this.mapCenter.latitude = selectedScooter.location_lat;
					}
				}
				this.updateMarkers();
			},
			nextStep() {
				uni.navigateTo({
					url: '/pages/order/confirm'
				});
			}
		}
	};
</script>

<style>
	.instruction {
		display: block;
		text-align: center;
		z-index: 1;
		padding: 5px;
		position: fixed;
		top: 25px;
		width: 100%;
		background-color: #ffffff;
	}
	.list-container {
		margin-top: 35px;
		margin-bottom: 55px;
	}
	.next-button-area {
		background-color: #ffffff;
		position: fixed;
		width: 100%;
		padding: 5px;
		bottom: 0;
	}
	.cell-content {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}
	.scooter-id {
		font-size: 16px;
		font-weight: bold;
	}
	.battery {
		color: #666;
	}
	.selected {
		border: 2px solid #007aff !important;
		border-radius: 8px;
	}
	.van-cell {
		border: 1px solid #eee;
		border-radius: 8px;
		width: 95%;
		margin: auto;
	}
	.detail {
		display: flex;
		flex-direction: column;
		font-size: 14px;
		color: #666;
		padding: 8px 0;
	}
</style> 