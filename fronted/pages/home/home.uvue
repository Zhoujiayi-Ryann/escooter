<template>
	<view>
		<van-floating-panel
		v-model:height="height"
		:anchors="anchors">
			<view class="instruction">
				<text>Rent E-scooters</text>
			</view>
			<van-cell-group class="list-container">
				<van-cell
				v-for="scooter in scooters" 
				:key="scooter.scooterId"
				:class="{'selected': selected === scooter.scooterId}"
				@click="selectEscooter(scooter.scooterId)">
					<template #title>
						<view class="cell-content">
							<text class="scooter-id">{{scooter.scooterId}}</text>
							<text class="battery">{{scooter.batteryLevel}}%</text>
						</view>
					</template>
					<template #label>
						<view v-if="selected === scooter.scooterId" class="detail">
							<text>Status: {{scooter.status}}</text>
							<text>Price: ￡{{scooter.price}}</text>
						</view>
					</template>
				</van-cell>
			</van-cell-group>
			<view class="next-button-area">
				<van-button
				round
				type="success"
				:disabled="selected === null"
				@click="nextStep">
				{{ selected === null ? 'Choose An E-scooter' : 'Next' }}
				</van-button>
			</view>
		</van-floating-panel>
		<map
		id="myMap"
		:longitude="mapCenter.longitude"
		:latitude="mapCenter.latitude"
		:style="{ width: windowWidth + 'px', height: windowHeight + 'px' }"
		:show-location="true"
		:markers="markers"
		:rotate="direction"
		:scale="scale">
		</map>
	</view>
</template>

<script>
import { api } from '../../utils/request';
export default {
	data() {
		return {
			longitude: 116.39742,
			latitude: 39.909,
			windowWidth: 0,
			windowHeight: 0,
			markers: [] as Array<{
				id: string;
				latitude: number;
				longitude: number;
				width: number;
				height: number;
				iconPath: string;
				callout: {
					content: string;
					display: 'ALWAYS' | 'BYCLICK';
				};
			}>,
			direction: 0,
			scale: 16,
			height: 60,
			anchors: [60, 0],
			selected: null,
			mapCenter: {
				longitude: 116.39742,
				latitude: 39.909
			},
			scooters: [] as Array<{
				scooterId: number;
				locationLat: number;
				locationLng: number;
				status: string;
				batteryLevel: number;
				price: number;
			}>
		};
	},
	mounted() {
		console.log('mounted 钩子被调用');
		this.getLocation();
		this.startCompass();
		this.updateMarkers();
		this.fetchScooters();
	},
	onReady() {
		this.setHeight();
		this.setWidth();
		this.getAnchors();
	},
	methods: {
		getLocation() {
			uni.getLocation({
				type: 'gcj02',
				success: (res) => {
					this.longitude = res.longitude;
					this.latitude = res.latitude;
					this.mapCenter.longitude = res.longitude;
					this.mapCenter.latitude = res.latitude;
				},
				fail: (err) => {
					console.log(err);
					uni.showToast({
						title: 'Fail to locate.',
						icon: 'none',
						duration: 2000
					});
				}
			});
		},
		setHeight() {
			this.windowHeight = uni.getSystemInfoSync().windowHeight;
		},
		setWidth() {
			this.windowWidth = uni.getSystemInfoSync().windowWidth;
		},
		startCompass() {
			uni.onCompassChange((res) => {
				this.direction = res.direction;
			});
		},
		getAnchors() {
			this.anchors = [
				60,
				Math.round(0.7 * this.windowHeight)
			];
		},
		updateMarkers() {
			this.markers = this.scooters.map(scooter => ({
				id: scooter.scooterId.toString(),
				latitude: scooter.locationLat,
				longitude: scooter.locationLng,
				width: this.selected === scooter.scooterId ? 32 : 25,
				height: this.selected === scooter.scooterId ? 32 : 25,
				iconPath: '/static/order_details/maker.svg',
				callout: {
					content: `Scooter ${scooter.scooterId}`,
					display: this.selected === scooter.scooterId ? 'ALWAYS' : 'BYCLICK'
				}
			}));
		},
		selectEscooter(id) {
			if (this.selected === id) {
				this.selected = null;
				this.mapCenter.longitude = this.longitude;
				this.mapCenter.latitude = this.latitude;
			} else {
				this.selected = id;
				const selectedScooter = this.scooters.find(s => s.scooterId === id);
				if (selectedScooter) {
					this.mapCenter.longitude = selectedScooter.locationLng;
					this.mapCenter.latitude = selectedScooter.locationLat;
				}
			}
			this.updateMarkers();
		},
		nextStep() {
			uni.navigateTo({
				url: '/pages/order/confirm'
			});
		},
		fetchScooters() {
			api.getScooters().then(res => {
				console.log('API 响应:', res);
				if (res.code === 1) {
					this.scooters = res.data.map(scooter => JSON.parse(JSON.stringify(scooter)));
					console.log('转换后的滑板车数据:', this.scooters);
					console.log('第一个滑板车的所有字段:', this.scooters[0]);
					for (const key in this.scooters[0]) {
						console.log(`字段: ${key}, 值: ${this.scooters[0][key]}`);
					}
					this.updateMarkers();
				} else {
					console.error('获取滑板车失败:', res.msg);
				}
			}).catch(err => {
				console.error('请求异常:', err);
			});
		}
	}
};
</script>

<style>
	.instruction {
		display: block;
		text-align: center;
		z-index: 1;
		padding: 5px;
		position: fixed;
		top: 25px;
		width: 100%;
		background-color: #ffffff;
	}
	.list-container {
		margin-top: 35px;
		margin-bottom: 55px;
	}
	.next-button-area {
		background-color: #ffffff;
		position: fixed;
		width: 100%;
		padding: 5px;
		bottom: 0;
	}
	.cell-content {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}
	.scooter-id {
		font-size: 16px;
		font-weight: bold;
	}
	.battery {
		color: #666;
	}
	.selected {
		border: 2px solid #007aff !important;
		border-radius: 8px;
	}
	.van-cell {
		border: 1px solid #eee;
		border-radius: 8px;
		width: 95%;
		margin: auto;
	}
	.detail {
		display: flex;
		flex-direction: column;
		font-size: 14px;
		color: #666;
		padding: 8px 0;
	}
</style> 