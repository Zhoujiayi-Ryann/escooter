<template>
	<view>
		<view class="menu-button" @click="toggleSidebar">
			<van-icon name="bars" size="24px" color="#333" />
		</view>
		<view class="notification-button" @click="navigateTo('notification')">
			<van-icon name="bell" size="24px" color="#333" />
			<view class="notification-dot" v-if="hasUnreadNotifications"></view>
		</view>
		<view class="order-tip" v-if="orderTipInfo.show">
			<view class="tip-content">
				<text>{{ orderTipInfo.message }}</text>
				<van-button 
					type="primary" 
					size="small" 
					class="use-button"
					@click="orderTipInfo.action">
					{{ orderTipInfo.buttonText }}
				</van-button>
			</view>
		</view>
		<view class="sidebar"
		:class="{ 'sidebar-open': showSidebar }">			
			<view class="user-info">
			  <view class="greeting">
			    <text>Welcome,</text>
			    <text>{{ username || 'Guest' }}!</text>
			  </view>
			</view>

			<view class="payment-section">
				<view class="payment-hint">
					<text>Add Payment To Start</text>
					<van-icon name="card" size="20px" />
				</view>
				<van-button type="primary" block round class="payment-button" @click="navigateTo('card')">Add Cards</van-button>
			</view>
			<view class="sidebar-menu">
				<view class="menu-item" @click="navigateTo('cards')">
					<van-icon name="balance-o" size="22px" />
					<text>Cards</text>
				</view>
				<view class="menu-item" @click="navigateTo('records')">
					<van-icon name="clock-o" size="22px" />
					<text>Records</text>
				</view>
				<view class="menu-item" @click="navigateTo('coupons')">
					<van-icon name="coupon-o" size="22px" />
					<text>Coupons</text>
				</view>
				<view class="menu-item" @click="navigateTo('help')">
					<van-icon name="question-o" size="22px" />
					<text>Help</text>
				</view>
				<view class="menu-item" @click="navigateTo('settings')">
					<van-icon name="setting-o" size="22px" />
					<text>Settings</text>
				</view>
			</view>
		</view>
		<view v-if="showSidebar" class="sidebar-overlay" @click="toggleSidebar"></view>
		<van-floating-panel
		v-show="!orderTipInfo.show"
		v-model:height="height"
		:anchors="anchors">
			<view v-if="panelState === 'timeSelector'" class="time-selector-panel">
				<view class="instruction">
					<text>Rent E-scooters</text>
				</view>
				<view class="time-section">
					<view class="date-time-picker">
						<view class="date-item" @click="showStartPicker = true">
							<text class="date-text">{{ formatDate(startDate) }}</text>
							<text class="time-text">{{ getDayOfWeek(startDate) }} {{ startTime }}</text>
						</view>
						<view class="days-display">
							<text class="days-text">{{ rentalDurationText }}</text>
						</view>
						<view class="date-item" @click="showEndPicker = true">
							<text class="date-text">{{ formatDate(endDate) }}</text>
							<text class="time-text">{{ getDayOfWeek(endDate) }} {{ endTime }}</text>
						</view>
					</view>
					<view class="quick-options">
						<view class="quick-option-title">
							<text>Quick Choices:</text>
						</view>
						<view class="quick-option-buttons">
							<view 
							class="quick-option" 
							:class="{'active-option': quickOptionSelected === '1h'}"
							@click="setQuickOption('1h')">
								<text>1 Hour</text>
							</view>
							<view 
							class="quick-option" 
							:class="{'active-option': quickOptionSelected === '4h'}"
							@click="setQuickOption('4h')">
								<text>4 Hours</text>
							</view>
						</view>
						<view class="quick-option-buttons">
							<view 
							class="quick-option" 
							:class="{'active-option': quickOptionSelected === '1d'}"
							@click="setQuickOption('1d')">
								<text>1 Day</text>
							</view>
							<view 
							class="quick-option" 
							:class="{'active-option': quickOptionSelected === '1w'}"
							@click="setQuickOption('1w')">
								<text>7 Days</text>
							</view>
						</view>
					</view>
					<view class="time-limit-tip">
						<text>Note: You can only reserve within the next 7 days</text>
					</view>
				</view>
				<view class="next-button-area">
					<van-button
					round
					type="primary"
					:disabled="!isTimeValid"
					@click="showScooterList">
					See E-scooter list
					</van-button>
				</view>
			</view>
			<view v-if="panelState === 'scooterList'" class="scooter-list-panel">
				<view class="instruction">
					<text>Rent E-scooters</text>
				</view>
					<van-cell-group class="list-container">
					<van-cell
					v-for="scooter in scooters" 
					:key="scooter.scooterId"
					:class="{'selected': selected === scooter.scooterId}"
					@click="selectEscooter(scooter.scooterId)">
						<view class="scooter-info">
							<image class="scooter-image" src="/static/bikelogo/escooter_car2.png" mode="aspectFit"></image>
							<text class="scooter-id">SC{{scooter.scooterId}}</text>
							<text class="battery">{{scooter.batteryLevel}}%</text>
							<text class="price">￡{{scooter.price}}/hour</text>
						</view>
					</van-cell>
				</van-cell-group>
				<view class="next-button-area">
					<view class="button-group">
						<van-button
						round
						type="default"
						@click="backToTimeSelector"
						class="back-button">
						<van-icon name="arrow-left" />
						</van-button>
						<van-button
						round
						type="success"
						:disabled="selected === null"
						@click="navigateTo('confirm')"
						class="confirm-button">
						{{ selected === null ? 'Choose An E-scooter' : 'Next' }}
						</van-button>
					</view>
				</view>
			</view>
		</van-floating-panel>
		<van-popup 
		v-model:show="showStartPicker" 
		position="bottom"
		round>
			<van-picker-group 
			title="Start Time" 
			:tabs="['Date', 'Time']"
			@confirm="onConfirmStartTime" 
			@cancel="showStartPicker = false">
				<van-date-picker 
				v-model="tempStartDate" 
				:min-date="new Date()"
				:max-date="new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000)"/>
				<van-time-picker 
				v-model="tempStartTime" 
				:min-hour="getMinHour(tempStartDate)"/>
			</van-picker-group>
		</van-popup>
		<van-popup 
		v-model:show="showEndPicker" 
		position="bottom"
		round>
			<van-picker-group 
			title="End Time" 
			:tabs="['Date', 'Time']"
			@confirm="onConfirmEndTime" 
			@cancel="showEndPicker = false">
				<van-date-picker 
				v-model="tempEndDate" 
				:min-date="startDate"/>
				<van-time-picker 
				v-model="tempEndTime"
				:min-hour="getMinHourForEndTime(tempEndDate)"/>
			</van-picker-group>
		</van-popup>
		<cover-view class="map-overlay"></cover-view>
		<map
		id="myMap"
		:longitude="mapCenter.longitude"
		:latitude="mapCenter.latitude"
		:style="{ width: windowWidth + 'px', height: windowHeight + 'px' }"
		:show-location="true"
		:markers="markers"
		:rotate="direction"
		:scale="scale">
		</map>
	</view>
</template>

<script>
import { scooterApi } from '../../utils/api/scooter';
import { userApi } from '../../utils/api/user';
import { orderApi } from '../../utils/api/order';
import { dateUtils } from '../../utils/dateUtils';
import { notificationApi } from '../../utils/api/notification';

export default {
	data() {
		return {
			showSidebar: false,
			longitude: 116.39742,
			latitude: 39.909,
			windowWidth: 0,
			windowHeight: 0,
			markers: [] as Array<{
				id: string;
				latitude: number;
				longitude: number;
				width: number;
				height: number;
				iconPath: string;
				callout: {
					content: string;
					display: 'ALWAYS' | 'BYCLICK';
				};
			}>,
			direction: 0,
			scale: 16,
			height: 60,
			anchors: [60, 0],
			selected: null,
			mapCenter: {
				longitude: 116.39742,
				latitude: 39.909
			},
			scooters: [] as Array<{
				scooterId: number;
				locationLat: number;
				locationLng: number;
				status: string;
				batteryLevel: number;
				price: number;
			}>,
			username: '',
			panelState: 'timeSelector',
			startDate: new Date(),
			startTime: new Date().getHours().toString().padStart(2, '0') + ':' + new Date().getMinutes().toString().padStart(2, '0'),
			endDate: new Date(),
			endTime: new Date().getHours().toString().padStart(2, '0') + ':' + new Date().getMinutes().toString().padStart(2, '0'),
			tempStartDate: ['', '', ''],
			tempStartTime: ['', ''],
			tempEndDate: ['', '', ''],
			tempEndTime: ['', ''],
			showStartPicker: false,
			showEndPicker: false,
			quickOptionSelected: '',
			orderTipInfo: {
				show: false,
				message: '',
				buttonText: '',
				action: () => {}
			},
			hasUnreadNotifications: false,
		};
	},
	mounted() {
		this.getLocation();
		this.startCompass();
		this.updateMarkers();
		this.getUsername();
		this.initDateFormatting();
		this.checkUnstartedOrder();
		this.checkUnreadNotifications();
		
		// 使用uni.$on监听事件
		uni.$on('refreshHomePage', () => {
			this.checkUnstartedOrder();
		});
	},
	onReady() {
		this.setHeight();
		this.setWidth();
		this.getAnchors();
	},
	onShow() {
		this.getUsername();
		this.checkUnstartedOrder();
		this.checkUnreadNotifications();
	},
	onUnload() {
		// 移除事件监听
		uni.$off('refreshHomePage');
	},
	computed: {
		rentalDurationText() {
			const startDateTime = new Date(this.startDate);
			const [startHour, startMinute] = this.startTime.split(':').map(Number);
			startDateTime.setHours(startHour, startMinute);
			
			const endDateTime = new Date(this.endDate);
			const [endHour, endMinute] = this.endTime.split(':').map(Number);
			endDateTime.setHours(endHour, endMinute);
			
			const diffMs = endDateTime.getTime() - startDateTime.getTime();
			const diffMinutes = Math.ceil(diffMs / (1000 * 60));
			
			if (diffMinutes < 60) {
				return `${diffMinutes} Minutes`;
			} else {
				// 计算小时数，向上取整
				const diffHours = Math.ceil(diffMinutes / 60);
				if (diffHours < 24) {
					return diffHours === 1 ? '1 Hour' : `${diffHours} Hours`;
				} else {
					const diffDays = Math.floor(diffHours / 24);
					return diffDays === 1 ? '1 Day' : `${diffDays} Days`;
				}
			}
		},
		isTimeValid() {
			const startDateTime = new Date(this.startDate);
			const [startHour, startMinute] = this.startTime.split(':').map(Number);
			startDateTime.setHours(startHour, startMinute);
			
			const endDateTime = new Date(this.endDate);
			const [endHour, endMinute] = this.endTime.split(':').map(Number);
			endDateTime.setHours(endHour, endMinute);
			
			return startDateTime.getTime() !== endDateTime.getTime();
		}
	},
	methods: {
		getLocation() {
			uni.getLocation({
				type: 'gcj02',
				success: (res) => {
					this.longitude = res.longitude;
					this.latitude = res.latitude;
					this.mapCenter.longitude = res.longitude;
					this.mapCenter.latitude = res.latitude;
				},
				fail: (err) => {
					uni.showToast({
						title: 'Fail to locate.',
						icon: 'none',
						duration: 2000
					});
				}
			});
		},
		setHeight() {
			this.windowHeight = uni.getSystemInfoSync().windowHeight;
		},
		setWidth() {
			this.windowWidth = uni.getSystemInfoSync().windowWidth;
		},
		startCompass() {
			uni.onCompassChange((res) => {
				this.direction = res.direction;
			});
		},
		getAnchors() {
			this.anchors = [
				60,
				Math.round(0.5 * this.windowHeight)
			];
		},
		updateMarkers() {
			// 如果没有滑板车数据，则设置为空数组
			if (!this.scooters || this.scooters.length === 0) {
				this.markers = [];
				return;
			}
			
			this.markers = this.scooters.map(scooter => ({
				id: scooter.scooterId.toString(),
				latitude: scooter.locationLat,
				longitude: scooter.locationLng,
				width: this.selected === scooter.scooterId ? 32 : 25,
				height: this.selected === scooter.scooterId ? 32 : 25,
				iconPath: '/static/order_details/maker.svg',
				callout: {
					content: `Scooter ${scooter.scooterId}`,
					display: this.selected === scooter.scooterId ? 'ALWAYS' : 'BYCLICK'
				}
			}));
		},
		selectEscooter(id) {
			if (this.selected === id) {
				this.selected = null;
				this.mapCenter.longitude = this.longitude;
				this.mapCenter.latitude = this.latitude;
			} else {
				this.selected = id;
				const selectedScooter = this.scooters.find(s => s.scooterId === id);
				if (selectedScooter) {
					this.mapCenter.longitude = selectedScooter.locationLng;
					this.mapCenter.latitude = selectedScooter.locationLat;
				}
			}
			this.updateMarkers();
		},
		toggleSidebar() {
			this.showSidebar = !this.showSidebar;
		},
		navigateTo(page) {
			this.showSidebar = false;
			
			const pageMapping = {
				'confirm': '/pages/order/confirm',
				'notification': '/pages/notification/notification',
				'cards': '/pages/cards/cards',
				'records': '/pages/settings/orders/orders',
				'coupons': '/pages/settings/coupons/coupon',
				'help': '/pages/help/help',
				'settings': '/pages/settings/my_settings/my_settings',
				'card': '/pages/settings/card/card'
			};
			if (pageMapping[page]) {
				if (page === 'confirm') {
					if (this.selected === null) {
						uni.showToast({
							title: 'Please choose a scooter',
							icon: 'none'
						});
						return;
					}

					// 获取选中的滑板车信息
					const selectedScooter = this.scooters.find(s => s.scooterId === this.selected);
					if (!selectedScooter) {
						uni.showToast({
							title: 'Scooter information not found',
							icon: 'none'
						});
						return;
					}

					// 检查用户是否登录
					if (!userApi.isLoggedIn()) {
						uni.showToast({
							title: 'Please log in first',
							icon: 'none',
							duration: 2000
						});
						
						// 延迟后跳转到登录页面
						setTimeout(() => {
							uni.navigateTo({
								url: '/pages/login/login'
							});
						}, 1500);
						return;
					}
					
					// 用户已登录，可以安全获取用户ID
					const userId = userApi.getUserId();
					
					uni.navigateTo({
						url: `${pageMapping[page]}?scooterId=${this.selected}&batteryLevel=${selectedScooter.batteryLevel}&price=${selectedScooter.price}&startDate=${encodeURIComponent(this.formatFullDate(this.startDate))}&startTime=${encodeURIComponent(this.startTime)}&endDate=${encodeURIComponent(this.formatFullDate(this.endDate))}&endTime=${encodeURIComponent(this.endTime)}&latitude=${selectedScooter.locationLat}&longitude=${selectedScooter.locationLng}`
					});
				} else if (page === 'cards') {
					// 检查用户是否登录
					const isLoggedIn = userApi.isLoggedIn();
					if (!isLoggedIn) {
						uni.showToast({
							title: 'Please log in',
							icon: 'none',
							duration: 2000
						});
						return;
					}
					uni.navigateTo({
						url: pageMapping[page]
					});
				} else {
					uni.navigateTo({
						url: pageMapping[page]
					});
				}
			}
		},
		getUsername() {
			this.username = userApi.getUsername('Guest');
		},
		initDateFormatting() {
			const now = new Date();
			this.tempStartDate = [
				now.getFullYear().toString(),
				(now.getMonth() + 1).toString().padStart(2, '0'),
				now.getDate().toString().padStart(2, '0')
			];
			this.tempStartTime = [
				now.getHours().toString().padStart(2, '0'),
				now.getMinutes().toString().padStart(2, '0')
			];
			this.tempEndDate = [...this.tempStartDate];
			this.tempEndTime = [...this.tempStartTime];
			this.startDate = now;
			this.endDate = new Date(now);
			this.startTime = `${this.tempStartTime[0]}:${this.tempStartTime[1]}`;
			this.endTime = this.startTime;
		},
		formatDate(date) {
			const month = date.getMonth() + 1;
			const day = date.getDate();
			return `${month}/${day}`;
		},
		getDayOfWeek(date) {
			const today = new Date();
			if (date.getDate() === today.getDate() && 
				date.getMonth() === today.getMonth() && 
				date.getFullYear() === today.getFullYear()) {
				return 'Today';
			}
			const weekdays = ['Sun.', 'Mon.', 'Tues.', 'Wed.', 'Thur.', 'Fri.', 'Sat.'];
				return weekdays[date.getDay()];
		},
		getMinHour(date) {
			const today = new Date();
			const selectedDate = new Date(Number(date[0]), Number(date[1]) - 1, Number(date[2]));
			if (selectedDate.getDate() === today.getDate() && 
				selectedDate.getMonth() === today.getMonth() && 
				selectedDate.getFullYear() === today.getFullYear()) {
				return today.getHours();
			}
			return 0;
		},
		getMinHourForEndTime(date) {
			const selectedDate = new Date(Number(date[0]), Number(date[1]) - 1, Number(date[2]));
			if (selectedDate.getDate() === this.startDate.getDate() && 
				selectedDate.getMonth() === this.startDate.getMonth() && 
				selectedDate.getFullYear() === this.startDate.getFullYear()) {
				return Number(this.tempStartTime[0]);
			}
			return 0;
		},
		onConfirmStartTime() {
			this.startDate = new Date(
				Number(this.tempStartDate[0]),
				Number(this.tempStartDate[1]) - 1,
				Number(this.tempStartDate[2])
			);
			this.startTime = `${this.tempStartTime[0]}:${this.tempStartTime[1]}`;
			
			// 如果已经选择了快捷选项，则根据快捷选项计算结束时间
			if (this.quickOptionSelected) {
				const startDateTime = new Date(this.startDate);
				const [startHour, startMinute] = this.startTime.split(':').map(Number);
				startDateTime.setHours(startHour, startMinute);
				
				switch(this.quickOptionSelected) {
					case '1h':
						const oneHourLater = new Date(startDateTime.getTime() + 60 * 60 * 1000);
						this.endDate = oneHourLater;
						this.endTime = `${oneHourLater.getHours().toString().padStart(2, '0')}:${oneHourLater.getMinutes().toString().padStart(2, '0')}`;
						break;
					case '4h':
						const fourHoursLater = new Date(startDateTime.getTime() + 4 * 60 * 60 * 1000);
						this.endDate = fourHoursLater;
						this.endTime = `${fourHoursLater.getHours().toString().padStart(2, '0')}:${fourHoursLater.getMinutes().toString().padStart(2, '0')}`;
						break;
					case '1d':
						const oneDayLater = new Date(startDateTime.getTime() + 24 * 60 * 60 * 1000);
						this.endDate = oneDayLater;
						this.endTime = this.startTime;
						break;
					case '1w':
						const oneWeekLater = new Date(startDateTime.getTime() + 7 * 24 * 60 * 60 * 1000);
						this.endDate = oneWeekLater;
						this.endTime = this.startTime;
						break;
				}
			} else {
				// 如果没有选择快捷选项，则同步结束时间
				this.endDate = new Date(this.startDate);
				this.endTime = this.startTime;
			}
			
			// 更新临时日期和时间
			this.tempEndTime = [
				this.endTime.split(':')[0],
				this.endTime.split(':')[1]
			];
			this.tempEndDate = [
				this.endDate.getFullYear().toString(),
				(this.endDate.getMonth() + 1).toString().padStart(2, '0'),
				this.endDate.getDate().toString().padStart(2, '0')
			];
			
			this.showStartPicker = false;
		},
		onConfirmEndTime() {
			const newEndDate = new Date(
				Number(this.tempEndDate[0]),
				Number(this.tempEndDate[1]) - 1, 
				Number(this.tempEndDate[2])
			);
			const isSameDay = (
				newEndDate.getDate() === this.startDate.getDate() &&
				newEndDate.getMonth() === this.startDate.getMonth() &&
				newEndDate.getFullYear() === this.startDate.getFullYear()
			);
			if (isSameDay && Number(this.tempEndTime[0]) < Number(this.tempStartTime[0]) || 
				(Number(this.tempEndTime[0]) === Number(this.tempStartTime[0]) && 
				Number(this.tempEndTime[1]) < Number(this.tempStartTime[1]))) {
				this.tempEndTime = [...this.tempStartTime];
				uni.showToast({
					title: 'The end time cannot be earlier than the start time',
					icon: 'none'
				});
			}
			this.endDate = newEndDate;
			this.endTime = `${this.tempEndTime[0]}:${this.tempEndTime[1]}`;
			this.tempEndDate = [
				this.endDate.getFullYear().toString(),
				(this.endDate.getMonth() + 1).toString().padStart(2, '0'),
				this.endDate.getDate().toString().padStart(2, '0')
			];
			this.showEndPicker = false;
		},
		setQuickOption(option) {
			if (this.quickOptionSelected === option) {
				this.quickOptionSelected = '';
				return;
			}
			this.quickOptionSelected = option;
			const startDateTime = new Date(this.startDate);
			const [startHour, startMinute] = this.startTime.split(':').map(Number);
			startDateTime.setHours(startHour, startMinute);
			switch(option) {
				case '1h':
					const oneHourLater = new Date(startDateTime.getTime() + 60 * 60 * 1000);
					this.endDate = oneHourLater;
					this.endTime = `${oneHourLater.getHours().toString().padStart(2, '0')}:${oneHourLater.getMinutes().toString().padStart(2, '0')}`;
					break;
				case '4h':
					const fourHoursLater = new Date(startDateTime.getTime() + 4 * 60 * 60 * 1000);
					this.endDate = fourHoursLater;
					this.endTime = `${fourHoursLater.getHours().toString().padStart(2, '0')}:${fourHoursLater.getMinutes().toString().padStart(2, '0')}`;
					break;
				case '1d':
					const oneDayLater = new Date(startDateTime.getTime() + 24 * 60 * 60 * 1000);
					this.endDate = oneDayLater;
					this.endTime = this.startTime;
					break;
				case '1w':
					const oneWeekLater = new Date(startDateTime.getTime() + 7 * 24 * 60 * 60 * 1000);
					this.endDate = oneWeekLater;
					this.endTime = this.startTime;
					break;
			}
			this.tempEndDate = [
				this.endDate.getFullYear().toString(),
				(this.endDate.getMonth() + 1).toString().padStart(2, '0'),
				this.endDate.getDate().toString().padStart(2, '0')
			];
			this.tempEndTime = [
				this.endTime.split(':')[0],
				this.endTime.split(':')[1]
			];
		},
		updateQuickOptionSelected() {
			const startMs = this.startDate.getTime();
			const endMs = this.endDate.getTime();
			const diff = endMs - startMs;
			const oneHourMs = 60 * 60 * 1000;
			const fourHoursMs = 4 * oneHourMs;
			const oneDayMs = 24 * oneHourMs;
			const oneWeekMs = 7 * oneDayMs;
			const errorMargin = 10 * 60 * 1000;
			if (Math.abs(diff - oneHourMs) <= errorMargin) {
				this.quickOptionSelected = '1h';
			} else if (Math.abs(diff - fourHoursMs) <= errorMargin) {
				this.quickOptionSelected = '4h';
			} else if (Math.abs(diff - oneDayMs) <= errorMargin) {
				this.quickOptionSelected = '1d';
			} else if (Math.abs(diff - oneWeekMs) <= errorMargin) {
				this.quickOptionSelected = '1w';
			} else {
				this.quickOptionSelected = '';
			}
		},
		showScooterList() {
			this.panelState = 'scooterList';
			this.getAnchors();
			
			// 将日期和时间转换为ISO格式的日期时间字符串
			const startDateTime = new Date(this.startDate);
			const [startHour, startMinute] = this.startTime.split(':').map(Number);
			startDateTime.setHours(startHour, startMinute);
			
			const endDateTime = new Date(this.endDate);
			const [endHour, endMinute] = this.endTime.split(':').map(Number);
			endDateTime.setHours(endHour, endMinute);
			
			// 使用日期工具类格式化日期时间
			const startISOString = dateUtils.formatDateForBackend(startDateTime);
			const endISOString = dateUtils.formatDateForBackend(endDateTime);
			
			console.log('Sending dates to backend:', startISOString, endISOString);
			
			// 获取可用的滑板车
			uni.showLoading({
				title: 'Loading available scooters...'
			});
			
			scooterApi.getScooters().then(res => {
				if (res.code === 1) {
					this.scooters = res.data
						.filter(scooter => scooter.status === 'free')
						.map(scooter => ({
							scooterId: scooter.scooter_id,
							locationLat: scooter.location_lat,
							locationLng: scooter.location_lng,
							status: scooter.status,
							batteryLevel: scooter.battery_level,
							price: scooter.price
						}));
					this.updateMarkers();
					
					if (this.scooters.length === 0) {
						uni.showToast({
							title: 'No available scooters now',
							icon: 'none',
							duration: 2000
						});
					}
				} else {
					console.error('Failed to obtain scooter:', res.msg);
					uni.showToast({
						title: 'Failed to get available scooters',
						icon: 'none',
						duration: 2000
					});
				}
			}).catch(err => {
				console.error('Abnormal acquisition of skateboard:', err);
				uni.showToast({
					title: 'Network request exception',
					icon: 'none',
					duration: 2000
				});
			}).finally(() => {
				uni.hideLoading();
			});
		},
		backToTimeSelector() {
			this.panelState = 'timeSelector';
			this.getAnchors();
		},
		formatFullDate(date) {
			const year = date.getFullYear();
			const month = (date.getMonth() + 1).toString().padStart(2, '0');
			const day = date.getDate().toString().padStart(2, '0');
			return `${year}-${month}-${day}`;
		},
		checkUnstartedOrder() {
			// 先检查用户是否已登录
			if (!userApi.isLoggedIn()) {
				console.log('The user has not logged in, skipping the check and not starting the order');
				this.orderTipInfo.show = false;
				return;
			}
			
			// 用户已登录，获取用户ID并检查订单
			const userId = userApi.getUserId();
			orderApi.getUserOrders(userId).then(res => {
				if (res.code === 1 && res.data) {
					res.data.forEach((order, index) => {
						const orderMap = order.toMap();
					});
					const pendingOrder = res.data.find(order => {
						const orderMap = order.toMap();
						const status = orderMap.get('status');
						return status === 'pending';
					});
					const activeOrder = res.data.find(order => {
						const orderMap = order.toMap();
						const status = orderMap.get('status');
						return status === 'active';
					});
					const paidOrder = res.data.find(order => {
						const orderMap = order.toMap();
						const status = orderMap.get('status');
						return status === 'paid';
					});
					if (pendingOrder) {
						const orderMap = pendingOrder.toMap();
						const orderId = orderMap.get('order_id');
						
						this.orderTipInfo = {
							show: true,
							message: 'You have an unpaid order.',
							buttonText: 'Go to pay',
							action: () => {
								// 先获取订单详情
								orderApi.getOrderDetail(orderId).then(res => {
									if (res.code === 1 && res.data) {
										const orderDetail = res.data;
										// 构造支付页面需要的orderInfo
										const orderInfo = {
											orderId: orderDetail.order_id,
											scooterCode: `SC${orderDetail.scooter_id}`,
											startDate: dateUtils.formatDate(new Date(orderDetail.start_time)),
											startTime: dateUtils.formatTime(new Date(orderDetail.start_time)),
											endDate: dateUtils.formatDate(new Date(orderDetail.end_time)),
											endTime: dateUtils.formatTime(new Date(orderDetail.end_time)),
											duration: orderDetail.duration,
											cost: orderDetail.cost,
											address: orderDetail.address
										};
										
										uni.navigateTo({
											url: `/pages/order/payment?orderInfo=${encodeURIComponent(JSON.stringify(orderInfo))}`
										});
									} else {
										uni.showToast({
											title: 'Failed to get order details',
											icon: 'none'
										});
									}
								}).catch(err => {
									console.error('Failed to obtain order details:', err);
									uni.showToast({
										title: 'Network request exception',
										icon: 'none'
									});
								});
							}
						};
					} else if (activeOrder) {
						const orderMap = activeOrder.toMap();
						const orderId = orderMap.get('order_id');
						this.orderTipInfo = {
							show: true,
							message: 'You have an active order.',
							buttonText: 'Check details',
							action: () => {
								uni.navigateTo({
									url: `/pages/order_in_progress/order_in_progress?orderId=${orderId}`
								});
							}
						};
					} else if (paidOrder) {
						const orderMap = paidOrder.toMap();
						const orderId = orderMap.get('order_id');
						this.orderTipInfo = {
							show: true,
							message: 'You have already had an order.',
							buttonText: 'Go to use',
							action: () => {
								uni.navigateTo({
									url: `/pages/order_not_used/order_not_used?orderId=${orderId}`
								});
							}
						};
					} else {
						this.orderTipInfo.show = false;
					}
				} else {
					console.log('获取订单数据失败或数据为空');
					this.orderTipInfo.show = false;
				}
			}).catch(err => {
				console.error('Failed to obtain order:', err);
				this.orderTipInfo.show = false;
			});
		},
		async checkUnreadNotifications() {
			const userId = userApi.getUserId();
			if (!userId) {
				this.hasUnreadNotifications = false;
				return;
			}
			try {
				const res = await notificationApi.countUserUnreadNotifications(userId);
				if (res.code === 1) {
					this.hasUnreadNotifications = res.data > 0;
				} else {
					this.hasUnreadNotifications = false;
				}
			} catch (err) {
				console.error('Failed to retrieve the number of unread notifications:', err);
				this.hasUnreadNotifications = false;
			}
		}
	}
};
</script>

<style>
	.map-overlay {
	  position: absolute;
	  top: 0;
	  left: 0;
	  width: 100%;
	  height: 100%;
	  background: linear-gradient(
	    to bottom,
	    rgba(0, 123, 255, 0.2) 0%,   /* 顶部浅蓝色 */
	    rgba(0, 123, 255, 0.1) 50%,  /* 中间更透明 */
	    rgba(255, 255, 255, 0) 100%  /* 底部完全透明 */
	  );
	  pointer-events: none; /* 让地图仍可交互 */
	  z-index: 2; /* 确保蒙层在地图上方 */
	}
	
	.instruction {
		display: block;
		text-align: center;
		z-index: 1;
		padding: 5px;
		position: fixed;
		top: 15px;
		width: 100%;
		background-color: #ffffff;
		font-size: 26px;
	}
	.instruction text {
		font-size: 20px;
	}
	.list-container {
		margin-top: 35px;
		margin-bottom: 65px;
	}
	.next-button-area {
		background-color: #ffffff;
		position: fixed;
		width: 100%;
		padding: 5px;
		bottom: 0;
	}
	.next-button-area .van-button {
		font-size: 24px;
		height: 60px;
		line-height: 60px;
	}
	.next-button-area .van-button--disabled {
		background-color: #007aff !important;
		opacity: 0.5;
	}
	.next-button-area .van-button--success {
		background-color: #007aff !important;
		border-color: #007aff !important;
	}
	.scooter-info {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		gap: 15px;
		height: 60px;
	}
	.scooter-image {
		width: 40px;
		height: 40px;
		margin-right: 10px;
	}
	.scooter-id {
		font-size: 22px;
		font-weight: bold;
		flex: 1;
		height: 100%;
		display: flex;
		align-items: center;
		color: #666666;
	}
	.battery {
		color: #666;
		font-size: 20px;
		flex: 1;
		text-align: center;
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: center;
	}
	.price {
		font-size: 20px;
		color: #666;
		flex: 1;
		text-align: right;
		height: 100%;
		display: flex;
		align-items: center;
		justify-content: flex-end;
	}
	.selected {
		border: 2px solid #007aff !important;
		border-radius: 8px;
	}
	.van-cell {
		border: 1px solid #eee;
		border-radius: 8px;
		width: 95%;
		margin: 5px auto;
	}
	.time-section {
		margin-top: 40px;
		margin-bottom: 60px;
		padding: 15px;
	}
	.date-time-picker {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-top: 20px;
		padding: 0 15px;
		width: 100%;
		gap: 10px;
	}
	.date-item {
		background-color: rgba(255, 255, 255, 0.6);
		padding: 15px 10px;
		border-radius: 10px;
		flex: 1;
		min-width: 0;
		text-align: center;
		box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.1);
	}
	.date-text {
		font-size: 20px;
		color: #333;
		display: block;
		text-align: center;
		margin-bottom: 5px;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}
	.time-text {
		font-size: 15px;
		color: #666;
		display: block;
		text-align: center;
		white-space: nowrap;
		overflow: hidden;
		text-overflow: ellipsis;
	}
	.days-display {
		padding: 0 10px;
		min-width: 80px;
		text-align: center;
	}
	.days-text {
		font-size: 14px;
		color: #333;
		white-space: nowrap;
	}
	.quick-options {
		margin-top: 30px;
	}
	.quick-option-title {
		font-size: 22px;
		color: #333;
		margin-bottom: 10px;
		font-weight: bold;
	}
	.quick-option-buttons {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		
	}
	.quick-option {
		background-color: rgba(255, 255, 255, 0.2);
		padding: 10px 0;
		flex: 1;
		margin: 0 5px;
		box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.1);
		display: flex;
		justify-content: center;
		align-items: center;
		font-size: 25px;
		border: 2px solid #007aff;
	}
	.active-option {
		background-color: rgba(0, 122, 255, 0.1);
		border: 1px solid #007aff;
		color: #007aff;
		font-weight: bold;
	}
	.menu-button {
		position: fixed;
		top: 30px;
		left: 30px;
		z-index: 100;
		background-color: rgba(255, 255, 255, 0.8);
		border-radius: 50%;
		width: 50px;
		height: 50px;
		display: flex;
		justify-content: center;
		align-items: center;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
	}
	.menu-button .van-icon {
		font-size: 28px;
	}
	.sidebar {
		position: fixed;
		padding-top: 20px;
		left: -90%;
		width: 80%;
		height: 100%;
		background-color: white;
		z-index: 1000;
		transition: left 0.3s ease;
		display: flex;
		flex-direction: column;
	}
	.sidebar-open {
		left: 0;
	}
	.sidebar-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		z-index: 999;
	}
	.sidebar-header {
		padding: 15px 20px;
		border-bottom: 1px solid #f5f5f5;
	}
	.sidebar-title {
		font-size: 24px;
		font-weight: bold;
	}
	.user-info {
		padding: 15px 20px;
		border-bottom: 1px solid #f5f5f5;
	}
	/* .greeting {
		font-size: 26px;
		font-weight: bold;
		margin-bottom: 15px;
		display: block;
	} */
	.greeting {
	  display: flex;
	  flex-direction: column; /* 垂直排列实现换行 */
	  font-size: 26px;
	  font-weight: bold;
	  color: #333;
	  line-height: 1.5;
	  margin-bottom: 15px;

	}
	
	.greeting text{
		 font-size: 26px;
	}

	.payment-section {
		padding: 15px 20px;
		background-color: #f0f9ff;
		border-bottom: 1px solid #f5f5f5;
		height: 150px;
		display: flex;
		justify-content: center;
	}
	.payment-hint {
		display: flex;
		flex-direction: row;
		justify-content: center;
		gap: 20px;
		align-items: center;
		margin-bottom: 15px;
		font-size: 22px;
	}
	.payment-button {
		width: 100%;
		font-size: 20px;
	}
	.sidebar-menu {
		flex: 1;
		padding: 10px 0;
		overflow-y: auto;
	}
	.menu-item {
		padding: 20px 20px;
		display: flex;
		flex-direction: row;
		align-items: center;
		gap: 15px;
		cursor: pointer;
		transition: background-color 0.2s;
		font-size: 22px;
	}
	.menu-item:hover {
		background-color: #f5f5f5;
	}
	.menu-item:active {
		background-color: #e5e5e5;
	}
	.version-info {
		font-size: 18px;
		color: #999;
	}
	.notification-button {
		position: fixed;
		top: 30px;
		right: 30px;
		z-index: 100;
		background-color: rgba(255, 255, 255, 0.8);
		border-radius: 50%;
		width: 50px;
		height: 50px;
		display: flex;
		justify-content: center;
		align-items: center;
		box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
	}
	.notification-button .van-icon {
		font-size: 28px;
	}
	.notification-dot {
		position: absolute;
		top: 4px;
		right: 4px;
		width: 15px;
		height: 15px;
		background-color: #ff4d4f;
		border-radius: 50%;
		border: 2px solid #fff;
		box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
	}
	.button-group {
		display: flex;
		flex-direction: row;
		gap: 10px;
		padding: 0 10px;
	}
	.button-group .van-button {
		flex: 1;
	}
	.button-group .back-button {
		flex: 0.2;
		min-width: 50px !important;
	}
	.button-group .confirm-button {
		flex: 0.8;
	}
	.order-tip {
		position: fixed;
		bottom: 100px;
		left: 50%;
		transform: translateX(-50%);
		z-index: 100;
		background-color: rgba(255, 255, 255, 0.95);
		border-radius: 8px;
		box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
		padding: 10px 15px;
		width: 90%;
		max-width: 400px;
		height: 100px;
		display: flex;
		justify-content: center;
	}
	.tip-content {
		display: flex;
		flex-direction: row;
		justify-content: center;
		align-items: center;
		gap: 15px;
	}
	.tip-content text {
		font-size: 18px;
		color: #333;
	}
	.use-button {
		margin-left: 15px;
	}
	.time-limit-tip {
		margin-top: 20px;
		align-items: center;
		text-align: center;
		font-size: 14px;
		color: #666;
	}
	.instruction text {
	  font-size: 22px;
	  font-weight: bold;
	  color: #007aff;
	}
	.quick-option {
	  background: rgba(255, 255, 255, 0.5);
	  padding: 12px 0;
	  font-size: 18px;
	  border-radius: 10px;
	  border: 1px solid transparent;
	  transition: all 0.3s;
	  box-shadow: 0 2px 5px rgba(0,0,0,0.05);
	}
	
	.active-option {
	  background: linear-gradient(to right, #82b1ff, #007aff);
	  color: white;
	  border: none;
	  font-weight: bold;
	  box-shadow: 0 3px 8px rgba(0, 122, 255, 0.3);
	}
	.next-button-area .van-button {
	  font-size: 20px;
	  height: 55px;
	  line-height: 48px;
	  background: linear-gradient(to right, #82b1ff, #007aff);
	  border-radius: 25px;
	  color: white;
	  font-weight: bold;
	  box-shadow: 0 4px 10px rgba(0, 122, 255, 0.2);
	  margin-bottom: 20px;
	}
	.selected {
	  border: 2px solid #007aff !important;
	  border-radius: 10px;
	  box-shadow: 0 3px 8px rgba(0, 122, 255, 0.2);
	}
	/* 时间选择器统一为卡片式风格 */
	.date-time-picker {
	  display: flex;
	  justify-content: space-between;
	  align-items: center;
	  margin-top: 20rpx;
	  gap: 20rpx;
	}
	
	.date-item {
	  flex: 1;
	  background: #f4f8ff;
	  border-radius: 20rpx;
	  padding: 20rpx;
	  text-align: center;
	  box-shadow: 0 4px 10px rgba(0, 122, 255, 0.08);
	  border: 2rpx solid #cce6ff;
	}
	
	.date-text {
	  font-size: 30rpx;
	  font-weight: bold;
	  color: #007aff;
	}
	
	.time-text {
	  font-size: 26rpx;
	  color: #555;
	  margin-top: 10rpx;
	  display: block;
	}
	
	.days-display {
	  width: 140rpx;
	  height: 100rpx;
	  border-radius: 20rpx;
	  font-weight: bold;
	  font-size: smaller;
	  display: flex;
	  align-items: center;
	  justify-content: center;
	  text-align: center;
	  box-shadow: 0 4px 12px rgba(0, 122, 255, 0.25);
	}

</style> 