<template>
	<view class="container">
		<view class="header">
			<view class="back-btn" @click="handleBack">
				<van-icon name="arrow-left" class="back-icon" />
			</view>
			<text class="header-title">Notification</text>
		</view>
		<view v-for="item in notifications" :key="item.id" class="msg-card">
			<view class="msg-title">{{ item.title }}</view>
			<view class="msg-content">{{ item.content }}</view>
			<view class="msg-time">{{ formatTime(item.createdAt) }}</view>
			<view v-if="item.type === 'COUPON'" class="link" @click="goToPages(item.type)">
				<text>See Details</text>
				<van-icon name="arrow" class="arrow-icon" />
			</view>
		</view>
		<view v-if="notifications.length === 0" class="empty-tip">No Messages</view>
	</view>
</template>

<script>
import { userApi } from '../../utils/api/user/index.uts';
import { notificationApi } from '../../utils/api/notification/index.uts';

export default {
  data() {
    return {
      notifications: [],
      hasUnread: false,
      checkInterval: null
    };
  },
  onShow() {
    this.fetchNotifications();
    this.checkUnreadNotifications();
    this.startAutoCheck();
  },
  onHide() {
    this.stopAutoCheck();
  },
  onUnload() {
    this.stopAutoCheck();
  },
  methods: {
    // Start periodic check for unread notifications
    startAutoCheck() {
      this.stopAutoCheck();
      this.checkInterval = setInterval(() => {
        this.checkUnreadNotifications();
      }, 30000); // every 30 seconds
    },

    // Stop the periodic check
    stopAutoCheck() {
      if (this.checkInterval) {
        clearInterval(this.checkInterval);
        this.checkInterval = null;
      }
    },

    // Back navigation handler
    handleBack() {
      const pages = getCurrentPages();
      if (pages.length > 1) {
        uni.navigateBack();
      } else {
        uni.reLaunch({ url: '/pages/home/home' });
      }
    },

    // Check for unread notifications
    async checkUnreadNotifications() {
      const userId = userApi.getUserId();
      if (!userId) {
        this.hasUnread = false;
        return;
      }
      try {
        const res = await notificationApi.countUserUnreadNotifications(userId);
        if (res.code === 1) {
          this.hasUnread = res.data > 0;
        } else {
          this.hasUnread = false;
        }
      } catch (err) {
        console.error('Failed to check unread notifications:', err);
        this.hasUnread = false;
      }
    },

    // Fetch all notifications for the current user
    async fetchNotifications() {
      const userId = userApi.getUserId();
      if (!userId) {
        this.notifications = [];
        return;
      }

      try {
        const res = await notificationApi.getUserNotifications(userId);
        console.log('Raw notification data:', res.data);

        if (res.code === 1 && Array.isArray(res.data)) {
          this.notifications = res.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
          await this.markAllAsRead(userId);
        } else {
          this.notifications = [];
        }
      } catch (err) {
        console.error('Failed to fetch notifications:', err);
        this.notifications = [];
      }
    },

    // Mark all notifications as read
    async markAllAsRead(userId) {
      try {
        const res = await notificationApi.markAllAsRead(userId);
        if (res.code === 1) {
          console.log('All notifications marked as read');
          this.hasUnread = false;
        }
      } catch (err) {
        console.error('Failed to mark notifications as read:', err);
      }
    },

    // Navigate to related pages based on notification type
    goToPages(type) {
      if (type === 'COUPON') {
        uni.navigateTo({
          url: '/pages/settings/coupons/coupon'
        });
      } else if (type === 'COMMENT_REPLY') {
        uni.navigateTo({
          url: '/pages/feedback/detail'
        });
      }
    },

    // Format timestamp into readable time string
    formatTime(timestamp) {
      if (!timestamp) return '';
      const date = new Date(timestamp);
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      const hours = String(date.getHours()).padStart(2, '0');
      const minutes = String(date.getMinutes()).padStart(2, '0');
      return `${year}-${month}-${day} ${hours}:${minutes}`;
    }
  }
};
</script>


<style>
.container {
	  height: 100vh;
	  overflow-y: auto;
	  background: linear-gradient(to bottom, #e0f0ff, #ffffff);
	  padding: 20px;
	  box-sizing: border-box;
}

.header {
	background-color: #ffffff;
	padding: 40rpx 0;
	text-align: center;
	border-radius: 20rpx;
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
	position: relative;
	margin-bottom: 30rpx;
  margin-top: 15px;
}

.back-btn {
	position: absolute;
	top: 25rpx;
	left: 30rpx;
	display: flex;
	align-items: center;
	justify-content: center;
	cursor: pointer;
	z-index: 10;
	background-color: #f4f8ff;
	border-radius: 25rpx;
	width: 80rpx;
	height: 80rpx;
}
	
.back-icon {
    font-size: 55rpx;
	color: #0084ff;
}
	
.header-title {
	font-size: 40rpx;
	font-weight: bold;
	color: #007aff;
	text-align: center;
}

.msg-card {
	background: #f8fbfd;
	border-radius: 18rpx;
	padding: 32rpx 28rpx 20rpx 28rpx;
	margin-bottom: 28rpx;
	box-shadow: 0 2px 8px rgba(0,0,0,0.03);
	position: relative;
}

.msg-title {
	font-size: 34rpx;
	font-weight: bold;
	color: #222;
	margin-bottom: 12rpx;
}

.msg-content {
	font-size: 28rpx;
	color: #444;
	margin-bottom: 16rpx;
	white-space: pre-line;
}

.msg-time {
	font-size: 24rpx;
	color: #b0b0b0;
	text-align: left;
	padding: 8rpx 0;
	margin: 8rpx 0;
}

.empty-tip {
	text-align: center;
	color: #aaa;
	margin-top: 80rpx;
	font-size: 32rpx;
}

.link {
	display: flex;
	flex-direction: row;
	align-items: center;
	justify-content: space-between;
	padding: 16rpx 0 0;
	margin-top: 8rpx;
	border-top: 1px solid #eee;
	color: #0084ff;
	font-size: 28rpx;
	cursor: pointer;
}

.arrow-icon {
	font-size: 32rpx;
	color: #0084ff;
}
</style>
