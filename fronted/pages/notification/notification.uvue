<template>
	<view class="container">
		<view class="header">
			<view class="back-btn" @click="handleBack">
				<van-icon name="arrow-left" class="back-icon" />
			</view>
			<text class="header-title">Notification</text>
		</view>
		<view class="message-list">
			<view class="message-item" @click="navigateTo('customer-service')">
				<view class="message-icon customer-service">
					<van-icon name="service-o" size="30px" color="#fff" />
				</view>
				<view class="message-content">
					<text class="message-title">Support Messages</text>
				</view>
				<van-icon name="arrow" size="16px" color="#999" />
			</view>
			<view class="message-item" @click="navigateTo('system')">
				<view class="message-icon system">
					<van-icon name="volume-o" size="30px" color="#fff" />
                    <view class="unread-dot" v-if="hasUnread"></view>
				</view>
				<view class="message-content">
					<text class="message-title">System Messages</text>
				</view>
				<van-icon name="arrow" size="16px" color="#999" />
			</view>
		</view>
	</view>
</template>

<script>
import { userApi } from '../../utils/api/user/index.uts'
import { notificationApi } from '../../utils/api/notification/index.uts'

export default {
	data() {
		return {
			hasUnread: false,
			checkInterval: null
		}
	},
	onShow() {
		this.checkUnreadNotifications()
		// 每30秒检查一次未读消息
		this.startAutoCheck()
	},
	onHide() {
		// 页面隐藏时清除定时器
		this.stopAutoCheck()
	},
	onUnload() {
		// 页面卸载时清除定时器
		this.stopAutoCheck()
	},
	methods: {
		startAutoCheck() {
			// 清除可能存在的旧定时器
			this.stopAutoCheck()
			// 设置新的定时器，每30秒检查一次
			this.checkInterval = setInterval(() => {
				this.checkUnreadNotifications()
			}, 30000)
		},
		stopAutoCheck() {
			if (this.checkInterval) {
				clearInterval(this.checkInterval)
				this.checkInterval = null
			}
		},
		goBack() {
			uni.navigateBack();
		},
		navigateTo(type) {
			// 根据消息类型跳转到对应的详情页面
			const typeMapping = {
				'customer-service': '/pages/notification/customer-service',
				'system': '/pages/notification/system'
			};
			
			if (typeMapping[type]) {
				if (type === 'system') {
					// 进入系统消息页面时，标记所有消息为已读
					this.markAllAsRead()
				}
				uni.navigateTo({
					url: typeMapping[type]
				});
			} else {
				console.log(`消息类型 ${type} 的页面尚未实现`);
				uni.showToast({
					title: `${type} page not ready`,
					icon: 'none',
					duration: 2000
				});
			}
		},
		handleBack() {
			const pages = getCurrentPages();
			if (pages.length > 1) {
				uni.navigateBack();
			} else {
				uni.reLaunch({ url: '/pages/home/home' });
			}
		},
		async checkUnreadNotifications() {
			const userId = userApi.getUserId();
			if (!userId) {
				this.hasUnread = false;
				return;
			}
			try {
				const res = await notificationApi.countUserUnreadNotifications(userId);
				if (res.code === 1) {
					this.hasUnread = res.data > 0;
				} else {
					this.hasUnread = false;
				}
			} catch (err) {
				console.error('获取未读通知数量失败:', err);
				this.hasUnread = false;
			}
		},
		async markAllAsRead() {
			const userId = userApi.getUserId();
			if (!userId) return;
			
			try {
				await notificationApi.markAllAsRead(userId);
				this.hasUnread = false;
			} catch (err) {
				console.error('标记所有通知为已读失败:', err);
			}
		}
	}
}
</script>

<style>
.container {
	flex: 1;
	background: linear-gradient(to bottom, #e0f0ff, #ffffff);
	min-height: 100vh;
	padding: 20px;
}

.nav-header {
	position: sticky;
	top: 0;
	display: flex;
	align-items: center;
	justify-content: space-between;
	padding: 10px 15px;
	background-color: #fff;
	border-bottom: 1px solid #eee;
	z-index: 10;
}

.back-button {
	padding: 5px;
}

.page-title {
	font-size: 18px;
	font-weight: bold;
}

.right-buttons {
	display: flex;
	align-items: center;
}

.message-list {
	padding: 10px 0;
}

.message-item {
	display: flex;
	flex-direction: row;
	justify-content: center;
	align-items: center;
	padding: 15px;
	background-color: #fff;
	margin-bottom: 1px;
	position: relative;
}

.message-icon {
	width: 50px;
	height: 50px;
	border-radius: 50%;
	display: flex;
	align-items: center;
	justify-content: center;
	position: relative;
}

.customer-service {
	background-color: #39c5bb;
}

.system {
	background-color: #4b8bf4;
}

.unread-dot {
	position: absolute;
	top: 4px;
	right: 4px;
	width: 15px;
	height: 15px;
	border-radius: 50%;
	background-color: #ff4d4f;
	border: 2px solid #fff;
	box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
}

.message-content {
	flex: 1;
	margin-left: 15px;
}

.message-title {
	font-size: 16px;
	font-weight: 500;
	display: block;
}

.message-desc {
	font-size: 12px;
	color: #999;
	display: block;
}

.back-btn {
	position: absolute;
	top: 25rpx;
	left: 30rpx;
	display: flex;
	align-items: center;
	justify-content: center;
	cursor: pointer;
	z-index: 10;
	background-color: #f4f8ff;
	border-radius: 25rpx;
	width: 80rpx;
	height: 80rpx;
}
	
.back-icon {
    font-size: 55rpx;
	color: #0084ff;
}
	
.header-title {
	font-size: 40rpx;
	font-weight: bold;
	color: #007aff;
	text-align: center;
}

.header {
	background-color: #ffffff;
	padding: 40rpx 0;
	text-align: center;
	border-radius: 20rpx;
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
	position: relative;
	margin-bottom: 30rpx;
}
</style>
