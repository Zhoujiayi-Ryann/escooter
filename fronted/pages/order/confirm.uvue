<template>
  <view class="order-confirm-page">
	  
	      <view class="header">
			  <view class="back-btn" @click="navitohome">
			    <van-icon name="arrow-left" class="back-icon"/>
			  </view>
	        <text class="header-title">Order Details</text>
	      </view>

    <!-- 订单信息 -->
    <view class="info-card">
      <!-- 添加自行车图片 -->
      <view class="bike-image-container">
        <image class="scooter-image" src="/static/bikelogo/escooter_car2.png" mode="aspectFit"></image>
      </view>
    
      <view class="info-item">
        <text class="info-value">Scooter Number：
        <text class="info-label">{{ scooterCode }}</text>
        </text>
        
      </view>
    
      <view class="info-item">
        <text class="info-value">Other Information：
		<text class="info-label">{{ otherInfo }}</text>
        </text>
      </view>
    </view>
    
    <!-- 地址 MODIFY-->
    <view class="address-section">
      <text class="section-label">Address：</text>
      <input 
        class="address-input" 
        v-model="address" 
        placeholder="Please enter pickup address" 
        maxlength="100"
        @blur="validateAddress"
      />
    </view>
    <view class="address-error" v-if="addressError">
      <text class="error-text">{{ addressError }}</text>
    </view>
    
    <view class="bottom-button">
      <button class="rent-button" @click="goToRent">Go to rent</button>
    </view>
  </view>
</template>

<script>
import { ref, computed } from 'vue';
import { scooterApi, orderApi } from '@/utils/api';  // 更新 API 导入
import { userApi } from '@/utils/api/user';  // 导入userApi
import { Locale } from 'vant';
import enUS from 'vant/es/locale/lang/en-US';

Locale.use('en-US', enUS);

export default {
  data() {
    return {
      // 车辆信息
      scooterCode: '',  // 将从API获取
      scooterId: 0,     // 存储滑板车ID
      otherInfo: '',    // 将从API获取
      batteryLevel: 0,  // 电池电量
      price: 0,         // 价格
      
      // 租用时间信息
      startDate: '',    // 开始日期
      startTime: '',    // 开始时间
      endDate: '',      // 结束日期
      endTime: '',      // 结束时间
      
      address: '', // API(F->A)
      addressError: '',
      
      isLoading: false, // 加载状态
      apiError: '',      // API错误信息
      userId: 1,         // 存储用户ID
    };
  },
  onLoad(options) {
    // 获取从home页面传递的滑板车ID和用户ID
    if (options.scooterId) {
      this.scooterId = Number(options.scooterId);
      this.batteryLevel = Number(options.batteryLevel) || 0;
      this.price = Number(options.price) || 0;
      
      // 设置时间信息
      this.startDate = decodeURIComponent(options.startDate || '');
      this.startTime = decodeURIComponent(options.startTime || '');
      this.endDate = decodeURIComponent(options.endDate || '');
      this.endTime = decodeURIComponent(options.endTime || '');
      
      this.scooterCode = `SC${this.scooterId}`;
      this.otherInfo = `Electric Scooter, Battery: ${this.batteryLevel}%, Price: ¥${this.price}/day\nRental Period: ${this.startDate} ${this.startTime} to ${this.endDate} ${this.endTime}`;
    } else {
      // 如果没有传递ID，使用默认值用于测试
      this.scooterCode = 'SC12345';
      this.otherInfo = 'Electric Scooter Model XYZ, Range 100km';
    }
    
    // 获取用户ID - 优先使用URL中的参数，否则使用userApi获取
    if (options.userId) {
      this.userId = Number(options.userId);
      console.log('User ID from URL:', this.userId);
    } else {
      // 使用userApi获取用户ID，默认值为1
      this.userId = userApi.getUserId(1);
      console.log('User ID from userApi:', this.userId);
    }
  },
  methods: {
	navitohome(){
		uni.navigateTo({
		  url: '/pages/home/home'
		});
	},
    
    // TODO: 验证地址格式，是否要获取地址位置？？
    validateAddress() {
      // 清除先前的错误信息
      this.addressError = '';
      return true;
    },
    
    // 获取滑板车详细信息
    getScooterInfo(scooterId) {
      this.isLoading = true;
      scooterApi.getScooterById(scooterId)  // 使用 scooterApi 替代 api
        .then(res => {
          if (res.code === 1) {
            // 获取成功，设置滑板车信息
            const scooter = res.data;
            this.scooterCode = `SC${scooter.scooterId}`;
            this.otherInfo = `Electric Scooter, Battery: ${scooter.batteryLevel}%, Price: ¥${scooter.price}/day`;
          } else {
            // 获取失败
            this.apiError = res.msg || 'Failed to get scooter information';
            uni.showToast({
              title: this.apiError,
              icon: 'none'
            });
          }
        })
        .catch(err => {
          this.apiError = 'Network request exception';
          uni.showToast({
            title: this.apiError,
            icon: 'none'
          });
          console.error('Exception when getting scooter information:', err);
        })
        .finally(() => {
          this.isLoading = false;
        });
    },
    
    // 跳转
    goToRent() {
      // 创建订单
      this.createOrder();
    },
    
    // 创建订单
    createOrder() {
      this.isLoading = true;
      
      // 构建创建订单请求
      const orderData = {
        user_id: this.userId,
        scooter_id: this.scooterId || 1, // 如果没有ID则使用默认值1
        pickup_address: this.address
      };
      
      // 调用创建订单API，修改为使用 orderApi
      orderApi.createOrder(orderData)  // 使用 orderApi 替代 api
        .then(res => {
          console.log(res);
          if (res.code === 1) {
            // 订单创建成功
            const order = res.data;
            
            // 使用后端返回的价格和折扣信息
            const cost = order.cost || 0;
            const discountAmount = order.discount_amount || 0;
            
            // 订单对象
            const orderInfo = {
              orderId: order.order_id,
              scooterCode: this.scooterCode,
              address: this.address,
              cost: cost,
              discountAmount: discountAmount
            };
            
            // 跳转到支付页面并传递订单信息
            uni.navigateTo({
              url: '/pages/order/payment?orderInfo=' + encodeURIComponent(JSON.stringify(orderInfo))
            });
          } else {
            // 创建失败
            uni.showToast({
              title: res.msg || 'Failed to create order',
              icon: 'none'
            });
          }
        })
        .catch(err => {
          uni.showToast({
            title: 'Network request exception',
            icon: 'none'
          });
          console.error('Order creation exception:', err);
        })
        .finally(() => {
          this.isLoading = false;
        });
    }
  }
};
</script>

<style>
.order-confirm-page {
  background: linear-gradient(to bottom, #f0faff, #ffffff);
  min-height: 100%;
  display: flex;
  flex-direction: column;
  gap: 20rpx;
  padding: 20rpx;
  box-sizing: border-box;
}
.back-btn{
  position: absolute;
  top: 25rpx;
  left: 30rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  background-color: #f4f8ff;
  border-radius: 25rpx;
  width: 80rpx;
  height: 80rpx;
}

.back-icon{
  font-size: 55rpx;  
  color: #0084ff;
}
.header {
  background-color: #ffffff;
  padding: 40rpx 0;
  text-align: center;
  border-radius: 20rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  margin-top: 50rpx;
}

.header-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #007aff;
  text-align: center;
  margin-bottom: 20rpx;
}

.scooter-image {
  width: 100%;
  max-height: 300rpx;
  object-fit: contain;
  margin-bottom: 20rpx;
  border-radius: 20rpx;
  margin:auto auto;
}

.info-card {
  background: #ffffff;
  padding: 30rpx;
  border-radius: 20rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.info-item {
  margin-bottom: 20rpx;
  display: flex;
  justify-content: space-between;
}

.info-label {
  font-size: 28rpx;
  color: #333;
  font-weight: 200;
}

.info-value {
  font-size: 34rpx;
  font-weight: bold;
  color: #555;
}

.address-section {
  background: #ffffff;
  padding: 30rpx;
  border-radius: 20rpx;
  display: flex;
  flex-direction: row;
  align-items: center;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.section-label {
  font-size: 30rpx;
  color: #333;
  margin-right: 20rpx;
}

.address-input {
  flex: 1;
  font-size: 30rpx;
  border: none;
  outline: none;
  color: #333;
  background: transparent;
}

.address-error {
  margin: 10rpx 20rpx 0;
  padding: 0 30rpx;
}

.error-text {
  color: #ff4d4f;
  font-size: 26rpx;
}

.bottom-button {
  margin: 40rpx 0;
  padding: 0 30rpx;
}

.rent-button {
  background: linear-gradient(to right, #007aff, #00c3ff);
  color: #ffffff;
  font-size: 34rpx;
  height: 96rpx;
  line-height: 96rpx;
  border-radius: 48rpx;
  font-weight: bold;
  box-shadow: 0 6px 14px rgba(0, 122, 255, 0.2);
  text-align: center;
}
</style> 