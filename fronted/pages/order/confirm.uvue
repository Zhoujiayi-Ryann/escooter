<template>
  <view class="order-confirm-page">
	  
	      <view class="header">
			  <view class="back-btn" @click="navitohome">
			    <van-icon name="arrow-left" class="back-icon"/>
			  </view>
	        <text class="header-title">Order Details</text>
	      </view>

    <!-- 订单信息 -->
	<view class="info-card">
		<!-- 添加自行车图片 -->
		<view class="bike-image-container">
		  <image class="scooter-image" src="/static/bikelogo/escooter_car2.png" mode="aspectFit"></image>
		</view>
	</view>
    <view class="info-card">
      <view class="info-item">
        <text class="info-value">Scooter Number:
        <text class="info-label">{{ scooterCode }}</text>
        </text>
        
      </view>
    
      <view class="info-item">
        <text class="info-value">Other Information:
		<text class="info-label">{{ otherInfo }}</text>
        </text>
      </view>
      
<!--      <view class="info-item">
        <text class="info-value">Rental Period:
		    <text class="info-label">{{ rentalPeriod }}</text>
        </text>
      </view> -->
      
      <view class="info-item">
        <text class="info-value">Battery Level:
		    <text class="info-label">{{ batteryLevel }}%</text>
        </text>
      </view>
      
      <view class="info-item">
        <text class="info-value">Price:
		    <text class="info-label">£{{ price }}/hour</text>
        </text>
      </view>
    </view>
	<view class="info-item rental-period-item">
	  <text class="info-label-title">Rental Period:</text>
	  <view class="rental-period-value">{{ rentalPeriod }}</view>
	</view>
    
    <!-- 地址 MODIFY-->
    <view class="address-section">
      <text class="section-label">Address:</text>
      <text class="address-text">{{ address || 'Loading location...' }}</text>
    </view>
    <view class="address-error" v-if="addressError">
      <text class="error-text">{{ addressError }}</text>
    </view>
    
    <view class="agreement-section">
      <van-checkbox v-model="agreedToTerms" shape="square" icon-size="18px">
        <text class="agreement-text">I acknowledge and agree to the </text><br>
        <text class="agreement-link" @click="showAgreement">User Agreement</text>
      </van-checkbox>
    </view>
    
    <van-popup
      v-model:show="showAgreementPopup"
      position="bottom"
      round
      :style="{ height: '70%' }"
    >
      <view class="agreement-popup">
		<scroll-view class="agreement-content" scroll-y>
			 <view class="agreement-title">User Agreement</view>
		  <view class="agreement-section">
			<view class="section-title">1. General Terms</view>
			<view class="section-text">
			  By using our e-scooter rental service, you agree to comply with all applicable laws and regulations.
			</view>
		  </view>

		  <view class="agreement-section">
			<view class="section-title">2. Safety Requirements</view>
			<view class="section-text">
			  • You must be at least 16 years old to use our service<br />
			  • Wear a helmet while riding<br />
			  • Follow all traffic rules and regulations
			</view>
		  </view>

		  <view class="agreement-section">
			<view class="section-title">3. Rental Rules</view>
			<view class="section-text">
			  • Return the e-scooter in the same condition as received<br />
			  • Report any damages or issues immediately<br />
			  • If you return earlier than the reserved time, no refund will be provided for the remaining rental period
			</view>
		  </view>

		  <view class="agreement-section">
			<view class="section-title">4. Payment Terms</view>
			<view class="section-text">
			  • All charges will be processed through your registered credit card<br />
			  • Late returns will incur additional charges
			</view>
		  </view>

		  <view class="agreement-section">
			<view class="section-title">5. Liability</view>
			<view class="section-text">
			  • Users are responsible for any damages caused to the scooter<br />
			  • We are not liable for any personal injuries or property damage
			</view>
		  </view>
		</scroll-view>

      </view>
    </van-popup>

    <view class="bottom-button">
      <button class="rent-button" :class="{'rent-button-disabled': !agreedToTerms}" @click="goToRent">Go to Rent</button>
    </view>
  </view>
</template>

<script>
import { ref, computed } from 'vue';
import { scooterApi, orderApi } from '@/utils/api';  // 更新 API 导入
import { userApi } from '@/utils/api/user';  // 导入userApi
import { Locale } from 'vant';
import enUS from 'vant/es/locale/lang/en-US';

Locale.use('en-US', enUS);

export default {
  data() {
    return {
      // 车辆信息
      scooterCode: '',  // 将从API获取
      scooterId: 0,     // 存储滑板车ID
      otherInfo: '',    // 将从API获取
      batteryLevel: 0,  // 电池电量
      price: 0,         // 价格
      
      // 租用时间信息
      startDate: '',    // 开始日期
      startTime: '',    // 开始时间
      endDate: '',      // 结束日期
      endTime: '',      // 结束时间
      rentalPeriod: '', // 租用时间段
      
      address: '', // API(F->A)
      addressError: '',
      
      isLoading: false, // 加载状态
      apiError: '',      // API错误信息
      userId: 1,         // 存储用户ID
      latitude: 0,       // 存储纬度
      longitude: 0,      // 存储经度
      agreedToTerms: false, // 添加用户协议同意状态
      showAgreementPopup: false,
    };
  },
  onLoad(options) {
    console.log('接收到的参数：', options);
    
    // 获取从home页面传递的滑板车ID和用户ID
    if (options.scooterId) {
      this.scooterId = Number(options.scooterId);
      this.batteryLevel = Number(options.batteryLevel) || 0;
      this.price = Number(options.price) || 0;
      
      // 设置时间信息
      this.startDate = decodeURIComponent(options.startDate || '');
      this.startTime = decodeURIComponent(options.startTime || '');
      this.endDate = decodeURIComponent(options.endDate || '');
      this.endTime = decodeURIComponent(options.endTime || '');
      
      // 设置位置信息
      this.latitude = Number(options.latitude) || 0;
      this.longitude = Number(options.longitude) || 0;
      
      this.scooterCode = `SC${this.scooterId}`;
      this.otherInfo = `Electric Scooter`;
      this.rentalPeriod = `${this.startDate} ${this.startTime} to ${this.endDate} ${this.endTime}`;
      
      // 获取地址信息
      if (this.latitude && this.longitude) {
        this.getLocationAddress();
      }
    } else {
      // 如果没有传递ID，使用默认值用于测试
      this.scooterCode = 'SC12345';
      this.otherInfo = 'Electric Scooter Model XYZ, Range 100km';
      this.rentalPeriod = 'Not specified';
    }
    
    // 获取用户ID - 优先使用URL中的参数，否则使用userApi获取
    if (options.userId) {
      this.userId = Number(options.userId);
      console.log('User ID from URL:', this.userId);
    } else {
      // 使用userApi获取用户ID，默认值为1
      this.userId = userApi.getUserId(1);
      console.log('User ID from userApi:', this.userId);
    }
  },
  methods: {
	navitohome(){
		uni.navigateTo({
		  url: '/pages/home/home'
		});
	},
    
    // TODO: 验证地址格式，是否要获取地址位置？？
    validateAddress() {
      // 清除先前的错误信息
      this.addressError = '';
      return true;
    },
    
    // 获取滑板车详细信息
    getScooterInfo(scooterId) {
      this.isLoading = true;
      scooterApi.getScooterById(scooterId)
        .then(res => {
          if (res.code === 1) {
            // 获取成功，设置滑板车信息
            const scooter = res.data;
            this.scooterCode = `SC${scooter.scooter_id}`;
            this.otherInfo = `Electric Scooter, Battery: ${scooter.battery_level}%, Price: $${scooter.price}/hour`;
            this.batteryLevel = scooter.battery_level;
            this.price = scooter.price;
          } else {
            // 获取失败
            this.apiError = res.msg || 'Failed to get scooter information';
            uni.showToast({
              title: this.apiError,
              icon: 'none'
            });
          }
        })
        .catch(err => {
          this.apiError = 'Network request exception';
          uni.showToast({
            title: this.apiError,
            icon: 'none'
          });
          console.error('Exception when getting scooter information:', err);
        })
        .finally(() => {
          this.isLoading = false;
        });
    },
    
    // 跳转
    goToRent() {
      if (!this.agreedToTerms) {
        uni.showToast({
          title: 'Please agree to the User Agreement',
          icon: 'none',
          duration: 2000
        });
        return;
      }
      // 创建订单
      this.createOrder();
    },
    
    // 创建订单
    createOrder() {
      this.isLoading = true;
      
      // 将日期和时间转换为本地时区的格式化字符串
      const startDateTime = new Date(`${this.startDate} ${this.startTime}`);
      const endDateTime = new Date(`${this.endDate} ${this.endTime}`);
      
      // 格式化为 YYYY-MM-DDTHH:MM:SS 格式并保留本地时区信息
      const formatDateTime = (date) => {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        
        return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
      };
      
      // 构建创建订单请求
      const orderData = {
        user_id: this.userId,
        scooter_id: this.scooterId,
        pickup_address: this.address,
        start_time: formatDateTime(startDateTime),
        end_time: formatDateTime(endDateTime)
      };
      
      console.log('Creating order with data:', orderData);
      
      // 调用创建订单API
      orderApi.createOrder(orderData)
        .then(res => {
          if (res.code === 1) {
            // 订单创建成功
            const orderId = res.data.order_id;
            console.log('Order created successfully:', orderId);
            
            // 获取订单详情
            orderApi.getOrderDetail(orderId)
              .then(detailRes => {
                if (detailRes.code === 1) {
                  const orderDetail = detailRes.data;
                  
                  // 构建订单信息对象
                  const orderInfo = {
                    orderId: orderDetail.order_id,
                    scooterCode: `SC${this.scooterId}`,
                    address: orderDetail.pickup_address,
                    cost: orderDetail.cost,
                    startDate: this.startDate,
                    startTime: this.startTime,
                    endDate: this.endDate,
                    endTime: this.endTime,
                    duration: orderDetail.duration || 0
                  };
                  
                  // 跳转到支付页面并传递订单信息
                  uni.navigateTo({
                    url: '/pages/order/payment?orderInfo=' + encodeURIComponent(JSON.stringify(orderInfo))
                  });
                } else {
                  uni.showToast({
                    title: detailRes.msg || '获取订单详情失败',
                    icon: 'none'
                  });
                }
              })
              .catch(err => {
                uni.showToast({
                  title: '获取订单详情异常',
                  icon: 'none'
                });
                console.error('Get order detail exception:', err);
              });
          } else {
            // 创建失败
            uni.showToast({
              title: res.msg || 'Failed to create order',
              icon: 'none'
            });
          }
        })
        .catch(err => {
          uni.showToast({
            title: 'Network request exception',
            icon: 'none'
          });
          console.error('Order creation exception:', err);
        })
        .finally(() => {
          this.isLoading = false;
        });
    },
    
    // 获取地址信息
    getLocationAddress() {
      // 在请求发送前先显示经纬度
      this.address = `${this.latitude.toFixed(6)}, ${this.longitude.toFixed(6)}`;
      
      // #ifdef H5
      // 创建一个唯一的回调函数名
      const callbackName = 'jsonp_' + Date.now();
      
      // 创建全局回调函数
      window[callbackName] = (res) => {
        if (res && res.status === 0) {
          this.address = res.result.address;
        } else {
          console.error('地址解析失败：', res);
          // 保持经纬度显示
        }
        // 清理回调函数
        delete window[callbackName];
        // 移除script标签
        document.body.removeChild(script);
      };
      
      // 创建script标签
      const script = document.createElement('script');
      script.src = `https://apis.map.qq.com/ws/geocoder/v1/?location=${this.latitude},${this.longitude}&key=4HZBZ-FLRCL-COFPO-EKA57-6CILQ-OEFTJ&output=jsonp&callback=${callbackName}`;
      
      // 处理加载错误
      script.onerror = () => {
        console.error('地址解析请求失败');
        delete window[callbackName];
        document.body.removeChild(script);
      };
      
      // 添加到页面
      document.body.appendChild(script);
      // #endif
      
      // #ifdef APP-PLUS || MP
      uni.request({
        url: 'https://apis.map.qq.com/ws/geocoder/v1/',
        data: {
          location: `${this.latitude},${this.longitude}`,
          key: '4HZBZ-FLRCL-COFPO-EKA57-6CILQ-OEFTJ'
        },
        success: (res) => {
          if (res.data && res.data.status === 0) {
            this.address = res.data.result.address;
          } else {
            console.error('地址解析失败：', res.data);
            // 保持经纬度显示
          }
        },
        fail: (err) => {
          console.error('请求失败：', err);
          // 保持经纬度显示
        }
      });
      // #endif
    },
    showAgreement() {
      this.showAgreementPopup = true;
    },
  }
};
</script>

<style>
.order-confirm-page {
  background: linear-gradient(to bottom, #f0faff, #ffffff);
  min-height: 100%;
  display: flex;
  flex-direction: column;
  gap: 20rpx;
  padding: 20rpx;
  box-sizing: border-box;
}
.back-btn{
  position: absolute;
  top: 25rpx;
  left: 30rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  background-color: #f4f8ff;
  border-radius: 25rpx;
  width: 80rpx;
  height: 80rpx;
}

.back-icon{
  font-size: 55rpx;  
  color: #0084ff;
}
.header {
  background-color: #ffffff;
  padding: 40rpx 0;
  text-align: center;
  border-radius: 20rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  margin-top: 50rpx;
}

.header-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #007aff;
  text-align: center;
  margin-bottom: 20rpx;
}

.scooter-image {
  width: 100%;
  max-height: 300rpx;
  object-fit: contain;
  margin-bottom: 20rpx;
  border-radius: 20rpx;
  margin:auto auto;
}

.info-card {
  background: #ffffff;
  padding: 30rpx;
  border-radius: 20rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.info-item {
  margin-bottom: 20rpx;
  display: flex;
  justify-content: space-between;
}

.info-label {
  font-size: 28rpx;
  color: #333;
  font-weight: 200;
}

.info-value {
  font-size: 34rpx;
  font-weight: bold;
  color: #555;
}

.address-section {
  background: #ffffff;
  padding: 30rpx;
  border-radius: 20rpx;
  display: flex;
  flex-direction: row;
  align-items: center;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.section-label {
  font-size: 30rpx;
  color: #333;
  margin-right: 20rpx;
  font-weight: bold;
}

.address-input {
  flex: 1;
  font-size: 30rpx;
  border: none;
  outline: none;
  color: #333;
  background: transparent;
}

.address-error {
  margin: 10rpx 20rpx 0;
  padding: 0 30rpx;
}

.error-text {
  color: #ff4d4f;
  font-size: 26rpx;
}

.agreement-section {
  background: #ffffff;
  padding: 20rpx 30rpx;
  border-radius: 20rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  margin: 20rpx 0;
}

.agreement-text {
  font-size: 28rpx;
  color: #666;
  margin-left: 20rpx;
}

.agreement-link {
  font-size: 28rpx;
  color: #007aff;
  text-decoration: underline;
  margin-left: 20rpx;
}

.agreement-popup {
  height: 100%;
  display: flex;
  flex-direction: column;
}

.agreement-title {
  font-size: 32rpx;
  font-weight: bold;
  color: #333;
}

.agreement-content {
  flex: 1;
  padding: 30rpx;
}

.agreement-text-content {
  font-size: 28rpx;
  color: #666;
  line-height: 1.6;
  white-space: pre-wrap;
}
.agreement-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #007aff;
  text-align: center;
  margin-bottom: 40rpx;
}

.bottom-button {
  margin: 40rpx 0;
  padding: 0 30rpx;
}

.rent-button {
  background: linear-gradient(to right, #007aff, #00c3ff);
  color: #ffffff;
  font-size: 34rpx;
  height: 96rpx;
  line-height: 96rpx;
  border-radius: 48rpx;
  font-weight: bold;
  box-shadow: 0 6px 14px rgba(0, 122, 255, 0.2);
  text-align: center;
}

.rent-button-disabled {
  background: linear-gradient(to right, #cccccc, #dddddd);
  box-shadow: none;
  opacity: 0.7;
  pointer-events: auto !important;
}
.agreement-content {
  max-height: 80vh;
  padding: 24rpx 32rpx;
  background-color: #ffffff;
  border-radius: 20rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.agreement-section {
  margin-bottom: 36rpx;
}

.section-title {
  font-size: 32rpx;
  font-weight: bold;
  color: #007aff;
  margin-bottom: 16rpx;
}

.section-text {
  font-size: 28rpx;
  color: #444;
  line-height: 1.8;
}
/* 新增 rental-period 样式，展示更清晰 */
.rental-period-item {
  flex-direction: column;
  /* align-items: flex-start; */
  padding: 20rpx;
  background: #f7faff;
  border: 2rpx dashed #007aff;
  border-radius: 16rpx;
  margin-bottom: 30rpx;
  box-shadow: 0 2px 8px rgba(0, 122, 255, 0.08);
}

.info-label-title {
  font-size: 30rpx;
  font-weight: bold;
  color: #007aff;
  margin-bottom: 10rpx;
}

.rental-period-value {
  font-size: 28rpx;
  color: #444;
  line-height: 1.8;
  text-align: center;
  align-items: center;
}


</style> 