<template>
	<view class="payment-page">
		<!-- 订单信息 -->
		<view class="header">
			<view class="back-btn" @click="navitohome">
			  <van-icon name="arrow-left" class="back-icon"/>
			</view>
			<text class="header-title"> Payment Confirm</text>
		</view>
		<van-cell-group inset class="order-card">
			<van-cell title="Scooter Number" :value="orderInfo.scooterCode" />
			  <van-cell center title="Scooter Style">
			    <template #value>
			      <image
			        class="scooter-preview"
			        src="/static/bikelogo/escooter_car2.png"
			        mode="aspectFit"
			      />
			    </template>
			  </van-cell>
			<van-cell title="Order Number" :value="orderId" />

			<van-cell title="Rental Period">
			<template #value>
				<scroll-view scroll-x="true" class="scroll-time-line">
				<text>{{ orderInfo.startDate }} {{ orderInfo.startTime }} to {{ orderInfo.endDate }} {{ orderInfo.endTime }}</text>
				</scroll-view>
			</template>
			</van-cell>
			<van-cell title="Rental Days" :value="`${orderInfo.days} ${orderInfo.days === 1 ? 'day' : 'days'}`" />
			<van-cell title="Pickup address" :value="orderInfo.address" />
		</van-cell-group>

		<!-- 优惠券选择 -->
		<van-cell-group inset class="coupon-card">
			<van-coupon-cell
			  :coupons="coupons"
			  :chosen-coupon="chosenCoupon"
			  @click="showList = true"
			  currency="$"
			>
			  <template #value>
				<text v-if="chosenCoupon !== -1">
				  -${{ (coupons[chosenCoupon].denominations / 100).toFixed(2) }}
				</text>
				<text v-else>None</text>
			  </template>
			</van-coupon-cell>
		</van-cell-group>

		<van-cell-group inset class="amount-card">
			<van-cell title="Base Amount" class="base-amount">
				<template #value>
					<text class="currency base-price">${{ calculateBaseTotalAmount() }}</text>
				</template>
			</van-cell>
			<van-cell title="Coupon Discount" v-if="calculateCouponDiscount() > 0" class="coupon-discount">
				<template #value>
					<text class="currency discount-price">-${{ calculateCouponDiscount() }}</text>
				</template>
			</van-cell>
			<van-cell title="Payment Amount" class="amount">
				<template #value>
					<text class="currency">$</text>
					<text class="price">{{ totalAmount }}</text>
				</template>
			</van-cell>
		</van-cell-group>

		<!-- 支付方式选择 -->
		<van-cell-group inset title="Payment Method" class="payment-method">
			<van-cell title="Credit Card" clickable @click="showCardList = true">
				<template #icon>
					<image src="/static/icons/bankcard.svg" class="payment-icon" />
				</template>
				<template #value>
					<text v-if="selectedCard">{{ formatCardNumber(selectedCard.card_number) }}</text>
					<text v-else>Select a card</text>
				</template>
				<template #right-icon>
					<van-icon name="arrow" />
				</template>
			</van-cell>
		</van-cell-group>

		<view class="bottom-button">
			<van-button type="primary" block round @click="showPasswordInput">
				Confirm Payment
			</van-button>
		</view>

		<!-- 密码弹出层 -->
		<van-popup v-model:show="showPassword" position="bottom" round :style="{ padding: '24px' }">
			<view class="password-popup">
				<text class="popup-title">Enter Payment Password</text>
				<text class="popup-amount">${{ totalAmount }}</text>

				<van-password-input 
					:value="password" 
					:mask="true" 
					:focused="passwordFocus"
					@focus="passwordFocus = true" 
					class="password-input"
				/>

				<!-- 数字键盘 -->
				<van-number-keyboard 
					v-model:show="passwordFocus" 
					v-model:value="password" 
					:maxlength="6"
					@blur="passwordFocus = false" 
					@close="closePasswordInput" 
					@input="onPasswordInput"
					@delete="onPasswordDelete" 
					:safe-area-inset-bottom="true"
				/>
			</view>
		</van-popup>

		<!-- 优惠券列表 -->
		<van-popup
		  v-model:show="showList"
		  round
		  position="bottom"
		  style="height: 90%; padding-top: 4px;"
		>
		  <van-coupon-list
			:coupons="coupons"
			:chosen-coupon="chosenCoupon"
			:disabled-coupons="disabledCoupons"
			@change="onChange"
			@exchange="onExchange"
		  />
		</van-popup>

		<!-- 银行卡列表弹窗 -->
		<van-popup
		  v-model:show="showCardList"
		  round
		  position="bottom"
		  style="height: 70%; padding-top: 20rpx;"
		>
		  <view class="card-list-popup">
			<view class="popup-header">
			  <text class="popup-title">Select Card</text>
			  <van-icon name="cross" class="close-icon" @click="showCardList = false" />
			</view>
			
			<view class="card-list">
			  <view v-if="loading" class="loading-container">
				<van-loading type="spinner" color="#007aff" />
				<text class="loading-text">Loading...</text>
			  </view>
			  
			  <view v-else-if="creditCards.length === 0" class="empty-container">
				<van-icon name="info-o" size="80rpx" color="#999" />
				<text class="empty-text">No cards available</text>
			  </view>
			  
			  <view 
				v-else
				v-for="(card, index) in creditCards" 
				:key="card.card_id"
				class="card-item"
				:class="{ 'card-selected': selectedCardId === card.card_id }"
				@click="toggleCardSelection(card)"
			  >
				<view class="card-left">
				  <view class="card-icon">
					<van-icon name="credit-pay" size="50rpx" color="#007aff" />
				  </view>
				  <view class="card-info">
					<text class="card-number">{{ formatCardNumber(card.card_number) }}</text>
					<text class="card-expiry">Expires: {{ card.expiry_date }}</text>
				  </view>
				</view>
				<van-icon v-if="selectedCardId === card.card_id" name="success" color="#007aff" size="40rpx" />
			  </view>
			</view>
			
			<view class="card-action">
			  <van-button type="primary" block round @click="confirmCardSelection">
				Confirm
			  </van-button>
			</view>
		  </view>
		</van-popup>
	</view>
</template>

<script>
	import { orderApi, creditCardApi } from '@/utils/api';
	import { userApi } from '@/utils/api/user';
	import { dateUtils } from '@/utils/dateUtils';
	import { Locale } from 'vant';
	import enUS from 'vant/es/locale/lang/en-US';

	Locale.use('en-US', enUS);

	export default {
		data() {
			return {
				orderId: 'OD' + Date.now(),
				orderInfo: {},
				totalAmount: 0, 
				unitPrice: 12.00,
				paymentMethod: 'bankcard',
				showPassword: false,
				showKeyboard: false,
				password: '',
				passwordFocus: false,
				showList: false,
				chosenCoupon: -1, // -1 未选择优惠券
				coupons: [],
				disabledCoupons: [
					{
						id: 3,
						condition: 'Min $100',
						discount: 20,
						denominations: 2000, // 单位为分
						originCondition: 10000,
						name: '$20 off on $100',
						startAt: Date.now() / 1000 - 86400 * 60,
						endAt: Date.now() / 1000 - 86400,
						valueDesc: '$20',
						unitDesc: '',
						description: 'Expired'
					}
				],
				bankCardSelected: false,
				showCardList: false,
				creditCards: [],
				selectedCard: null,
				selectedCardId: -1,
				loading: false,
			}
		},
		onLoad(options) {
			if (options.orderInfo) {
				this.orderInfo = JSON.parse(decodeURIComponent(options.orderInfo));
				// 使用后端返回的价格信息
				this.totalAmount = this.orderInfo.cost;
				
				// 设置订单ID
				this.orderId = this.orderInfo.orderId;
				
				console.log('订单信息:', this.orderInfo);
				
				// 加载订单可用的优惠券
				this.loadAvailableCoupons();
				
				// 优惠券加载完成后再计算总价
				setTimeout(() => {
					this.calculateTotal();
				}, 500);
			}
			
			// 加载用户银行卡
			this.loadUserCreditCards();
		},
		methods: {
			navitohome(){
				uni.navigateTo({
				  url: '/pages/order/confirm'
				});
			},
			togglePayment(method) {
				this.paymentMethod = method;
			},
			showPasswordInput() {
				this.showPassword = true;
				this.showKeyboard = true;
				this.passwordFocus = true;
			},
			closePasswordInput() {
				this.showPassword = false;
				this.showKeyboard = false;
				this.password = '';
				this.passwordFocus = false;
			},
			onPasswordInput(key) {
				if (this.password.length >= 6) {
					return;
				}
				this.password += key;
				if (this.password.length === 6) {
					this.handlePayment();
				}
			},
			onPasswordDelete() {
				this.password = this.password.slice(0, -1);
			},
			handlePayment() {
				// 获取订单ID
				const orderId = this.orderInfo.orderId || 0;
				
				if (!orderId) {
					uni.showToast({
						title: 'Incomplete order information',
						icon: 'none'
					});
					this.closePasswordInput();
					return;
				}
				
				// 验证是否选择了银行卡
				if (!this.selectedCard) {
					uni.showToast({
						title: 'Please select a payment card',
						icon: 'none'
					});
					this.closePasswordInput();
					return;
				}
				
				// 准备优惠券数据（如果选择了优惠券）
				let couponRequest = null;
				if (this.chosenCoupon !== -1 && this.coupons.length > this.chosenCoupon) {
					couponRequest = {
						couponId: this.coupons[this.chosenCoupon].id,
						orderId: orderId
					};
				}
				
				// 根据是否有优惠券选择不同的API调用
				const paymentPromise = couponRequest 
					? orderApi.payOrder(orderId, couponRequest) 
					: orderApi.payOrderWithoutCoupon(orderId);
				
				// 调用支付API
				paymentPromise
					.then(res => {
						console.log('Payment API response:', res);
						if (res.code === 1) {
							// 支付成功
							this.closePasswordInput();
							
							// 构建成功消息，包含优惠券信息
							let successMessage = 'Payment successful';
							if (res.data && res.data.coupon_amount) {
								successMessage += ` (Saved $${res.data.coupon_amount})`;
							}
							
							uni.showToast({
								title: successMessage,
								icon: 'success',
								duration: 2000
							});
							console.log('Payment successful, redirecting...');
							
							// 支付成功后跳转到booking_right界面
							setTimeout(() => {
								uni.reLaunch({
									url: `/pages/booking_right/booking_right?orderId=${orderId}`
								});
							}, 2000);
						} else {
							// 支付失败
							uni.showToast({
								title: res.msg || 'Payment failed',
								icon: 'none'
							});
							this.closePasswordInput();
						}
					})
					.catch(err => {
						uni.showToast({
							title: 'Network request exception',
							icon: 'none'
						});
						console.error('Payment request exception:', err);
						this.closePasswordInput();
					});
			},
			onChange(index) {
				console.log('选择优惠券，索引:', index, '当前选择:', this.chosenCoupon);
				
				// toggle-toggle
				if (this.chosenCoupon === index) {
					this.chosenCoupon = -1;
					console.log('取消选择优惠券');
				} else {
					this.chosenCoupon = index;
					console.log('选择了新的优惠券, ID:', this.coupons[index]?.id);
				}
				
				// 关闭优惠券列表
				this.showList = false;
				
				// 重新计算价格
				this.$nextTick(() => {
					this.calculateTotal();
				});
			},
			onExchange(code) {
				if (code === '123456') {
					// 假设兑换成功，添加新优惠券
					this.coupons.push({
						id: this.coupons.length + 1,
						condition: 'No minimum',
						discount: 15,
						denominations: 1500,
						originCondition: 0,
						name: 'New $15 Coupon',
						startAt: Date.now() / 1000,
						endAt: Date.now() / 1000 + 86400 * 30,
						valueDesc: '$15',
						unitDesc: '',
						description: 'Redeemed'
					});
					uni.showToast({
						title: 'Redemption Successful',
						icon: 'success'
					});
				} else {
					uni.showToast({
						title: 'Invalid Code',
						icon: 'error'
					});
				}
			},
			// 计算订单基础金额（不含优惠券折扣）
			calculateBaseTotalAmount() {
				return this.orderInfo.cost.toFixed(2);
			},
			// 计算优惠券折扣金额
			calculateCouponDiscount() {
				let couponDiscount = 0;
				
				// 优惠券折扣
				if (this.chosenCoupon !== -1 && this.coupons.length > this.chosenCoupon) {
					const coupon = this.coupons[this.chosenCoupon];
					console.log('选择的优惠券:', coupon);
					
					// 检查是否满足优惠券使用条件
					const baseAmount = parseFloat(this.orderInfo.cost || 0);
					if (baseAmount * 100 >= (coupon.originCondition || 0)) {
						couponDiscount = (coupon.denominations || 0) / 100;
					}
				}
				
				return couponDiscount.toFixed(2);
			},
			calculateTotal() {
				console.log('开始计算总价, 基础价格:', this.orderInfo.cost);
				
				// 基础价格
				let basePrice = parseFloat(this.orderInfo.cost || 0);
				
				// 减去优惠券折扣
				const couponDiscount = parseFloat(this.calculateCouponDiscount());
				console.log('优惠券折扣:', couponDiscount);
				
				if (couponDiscount > 0) {
					basePrice = Math.max(0, basePrice - couponDiscount);
				}
				
				// 确保价格是两位小数
				this.totalAmount = basePrice.toFixed(2);
				console.log('最终计算价格:', this.totalAmount);
				
				// 更新优惠券可用状态
				this.updateCouponsAvailability();
			},
			updateCouponsAvailability() {
				console.log('更新优惠券可用性');
				
				// 获取当前订单基本金额
				const baseAmountInCents = this.orderInfo.totalAmount ? Math.round(this.orderInfo.totalAmount * 100) : 0;
				console.log('当前订单基本金额(分):', baseAmountInCents);
				
				// 清空不可用优惠券列表
				this.disabledCoupons = [];
				
				// 遍历所有优惠券检查可用性
				this.coupons.forEach((coupon, index) => {
					// 检查优惠券是否满足订单金额要求
					const originCondition = coupon.originCondition || coupon.threshold * 100 || 0;
					
					// 检查优惠券是否在有效期内
					const now = Date.now() / 1000;
					const startTime = coupon.startAt || new Date(coupon.startTime).getTime() / 1000;
					const endTime = coupon.endAt || new Date(coupon.endTime).getTime() / 1000;
					const isTimeValid = now >= startTime && now <= endTime;
					
					// 如果不满足条件或过期，移至不可用列表
					if (baseAmountInCents < originCondition || !isTimeValid) {
						const disabledCoupon = {...coupon};
						if (baseAmountInCents < originCondition) {
							disabledCoupon.description = '订单金额不满足要求';
						} else {
							disabledCoupon.description = '优惠券已过期或未生效';
						}
						
						this.disabledCoupons.push(disabledCoupon);
						this.coupons.splice(index, 1);
					}
				});
				
				console.log('可用优惠券数量:', this.coupons.length);
				console.log('不可用优惠券数量:', this.disabledCoupons.length);
				
				// 如果之前选中的优惠券变成不可用，需要重置选择
				if (this.chosenCoupon) {
					const stillAvailable = this.coupons.some(coupon => coupon.id === this.chosenCoupon.id);
					if (!stillAvailable) {
						console.log('之前选中的优惠券不再可用，重置选择');
						this.chosenCoupon = null;
					}
				}
			},
			// 加载用户银行卡
			loadUserCreditCards() {
				this.loading = true;
				
				// 使用 userApi 获取用户 ID，默认为 1
				const userId = userApi.getUserId(1);
				
				if (!userId) {
					uni.showToast({
						title: 'Please login first',
						icon: 'none'
					});
					this.loading = false;
					return;
				}
				
				
				creditCardApi.getUserCreditCards(userId)
					.then(res => {
						if (res.code === 1) {
							this.creditCards = res.data || [];
						} else {
							uni.showToast({
								title: res.msg || 'Failed to get cards',
								icon: 'none'
							});
						}
					})
					.catch(err => {
						console.error('Card retrieval exception:', err);
						uni.showToast({
							title: 'Network request exception',
							icon: 'none'
						});
					})
					.finally(() => {
						this.loading = false;
					});
			},
			// 格式化银行卡号，只显示后四位
			formatCardNumber(cardNumber) {
				if (!cardNumber) return '';
				return '****  ****  ****  ' + cardNumber.slice(-4);
			},
			// 切换银行卡选择状态（toggle 逻辑）
			toggleCardSelection(card) {
				// 如果点击的是当前已选中的卡，则取消选择
				if (this.selectedCardId === card.card_id) {
					this.selectedCardId = -1;
				} else {
					// 否则选中点击的卡
					this.selectedCardId = card.card_id;
				}
			},
			// 确认银行卡选择
			confirmCardSelection() {
				if (this.selectedCardId === -1) {
					uni.showToast({
						title: 'Please select a card',
						icon: 'none'
					});
					return;
				}
				
				const card = this.creditCards.find(c => c.card_id === this.selectedCardId);
				if (card) {
					this.selectedCard = card;
					this.bankCardSelected = true;
					this.showCardList = false;
				}
			},
			// 跳转到添加银行卡页面
			goToAddCard() {
				uni.navigateTo({
					url: '/pages/user/add_card'
				});
			},
			async loadAvailableCoupons() {
				console.log('开始加载可用优惠券');
				try {
					// 清除之前的优惠券
					this.coupons = [];
					
					const result = await this.$apis.coupon.getAvailableCoupons();
					console.log('API返回的优惠券数据:', result);
					
					if (result && result.data && Array.isArray(result.data)) {
						// 确保所有优惠券数据格式化正确
						this.coupons = result.data.map(coupon => {
							return {
								...coupon,
								// 确保日期格式正确
								startTime: coupon.startTime || new Date().toISOString(),
								endTime: coupon.endTime || new Date().toISOString()
							};
						});
						
						console.log('格式化后的优惠券数据:', this.coupons);
					} else {
						console.log('没有可用的优惠券或返回数据格式不正确');
						this.coupons = [];
					}
					
					// 更新优惠券可用性并重新计算总价
					this.$nextTick(() => {
						this.updateCouponsAvailability();
						this.calculateTotal();
					});
				} catch (error) {
					console.error('加载优惠券失败:', error);
					this.coupons = [];
				}
			},
			// 计算优惠券折扣后的总价
			calculateTotalWithCoupon() {
				console.log('计算优惠券折扣后的总价');
				
				// 获取基础订单金额（以分为单位）
				const baseAmountInCents = this.orderInfo.totalAmount ? Math.round(this.orderInfo.totalAmount * 100) : 0;
				let finalAmountInCents = baseAmountInCents;
				
				// 如果选择了优惠券，应用折扣
				if (this.chosenCoupon) {
					console.log('应用优惠券折扣:', this.chosenCoupon.name);
					
					// 获取优惠券面值（以分为单位）
					const couponValueInCents = this.chosenCoupon.denominations || 0;
					
					// 应用折扣（确保不会出现负数）
					finalAmountInCents = Math.max(0, baseAmountInCents - couponValueInCents);
					
					console.log('订单基本金额(分):', baseAmountInCents);
					console.log('优惠券折扣金额(分):', couponValueInCents);
					console.log('折扣后金额(分):', finalAmountInCents);
				} else {
					console.log('没有选择优惠券，使用原始价格');
				}
				
				// 更新订单的最终金额（转换回元）
				this.finalAmount = (finalAmountInCents / 100).toFixed(2);
				console.log('最终价格(元):', this.finalAmount);
			},
			// 选择优惠券
			chooseCoupon(coupon) {
				console.log('选择优惠券:', coupon ? coupon.name : '不使用优惠券');
				this.chosenCoupon = coupon;
				this.showCouponPicker = false;
				
				// 重新计算总价
				this.calculateTotalWithCoupon();
			},
		}
	}
</script>

<style>
.payment-page {
  background: linear-gradient(to bottom, #f0faff, #ffffff);
  min-height: 100vh;
  padding: 30rpx;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  gap: 25rpx;
}
.back-btn{
  position: absolute;
  top: 25rpx;
  left: 30rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  background-color: #f4f8ff;
  border-radius: 25rpx;
  width: 80rpx;
  height: 80rpx;
}

.back-icon{
  font-size: 55rpx;  
  color: #0084ff;
}
.header {
  background-color: #ffffff;
  padding: 40rpx 0;
  text-align: center;
  border-radius: 20rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.header-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #007aff;
  text-align: center;
}

.page-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #007aff;
}

/* 卡片通用样式 */
.order-card,
.coupon-card,
.amount-card,
.payment-method {
  background: #ffffff;
  border-radius: 24rpx !important;
  padding: 20rpx 30rpx !important;
  box-shadow: 0 6px 14px rgba(0, 0, 0, 0.06);
  margin-left: 0;
  margin-right: 0;
  font-size: 32rpx;
}
.scooter-preview {
  width: 180rpx;
  height: 100rpx;
  border-radius: 12rpx;
  object-fit: contain;
}
/* 时间值展示 */
.scroll-time-line {
  display: block;
  white-space: nowrap;
  overflow-x: auto;
  max-width: 100%;
  font-size: 28rpx;
}

.to-text {
  margin: 0 8rpx;
  font-weight: 500;
}

/* 金额区域 */
.amount {
  font-size: 36rpx !important;
}

.currency {
  font-size: 30rpx;
  margin-right: 10rpx;
  color: #007aff;
}

.price {
  font-size: 44rpx;
  font-weight: bold;
  color: #007aff;
}


.payment-icon {
  width: 48rpx;
  height: 48rpx;
  margin-right: 24rpx; /* 让图标和文字拉开 */
  object-fit: contain;
}

/* 底部确认按钮 */
.bottom-button {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  padding: 30rpx;
  background: rgba(255, 255, 255, 0.95);
  box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.05);
  backdrop-filter: blur(10px);
  z-index: 999;
}

.van-button--primary {
  background: linear-gradient(to right, #82b1ff, #007aff) !important;
  border: none !important;
  color: #fff !important;
  box-shadow: 0 6px 20px rgba(0, 122, 255, 0.3) !important;
  transition: all 0.3s !important;
  font-size: 34rpx !important;
  height: 96rpx !important;
  line-height: 96rpx !important;
}

.van-button--primary:active {
  transform: scale(0.96);
}

.password-popup {
  padding: 40rpx;
  padding-bottom: 380rpx;
}

.popup-title {
  font-size: 34rpx;
  text-align: center;
  color: #222;
  font-weight: 600;
  margin-bottom: 16rpx;
}

.popup-amount {
  font-size: 48rpx;
  text-align: center;
  color: #007aff;
  font-weight: bold;
  margin-bottom: 40rpx;
}

.password-input {
  margin-bottom: 48rpx;
}

:deep(.van-popup) {
  backdrop-filter: blur(12px);
  background: rgba(255, 255, 255, 0.96) !important;
}

:deep(.van-cell) {
  background-color: transparent !important;
  font-size: 32rpx !important;
  color: #333;
}

:deep(.van-coupon-cell),
:deep(.van-coupon-list) {
  background: transparent !important;
}

:deep(.van-coupon) {
  background: rgba(255, 255, 255, 0.95) !important;
  border-radius: 18rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  margin-bottom: 20rpx;
}

:deep(.van-coupon__content) {
  background: transparent !important;
}


:deep(.van-checkbox__icon) {
  transform: scale(1.2);
}
:deep(.van-coupon__head) {
  font-size: 36rpx !important;
}

:deep(.van-coupon__value) {
  font-size: 40rpx !important;
  font-weight: bold;
}

:deep(.van-coupon__name),
:deep(.van-coupon__condition){
  font-size: 30rpx !important;
}
:deep(.van-coupon-list__exchange) {
  font-size: 30rpx !important;
}
:deep(.van-field__control) {
  font-size: 32rpx !important;
}

/* 关闭按钮（右上角关闭 icon） */
:deep(.van-popup__close-icon) {
  font-size: 40rpx !important;
  color: #333;
}
:deep(.van-popup__close-icon):hover {
  opacity: 0.8;
}
:deep(.van-tab) {
  font-size: 25rpx !important;
  font-weight: normal !important;
}

:deep(.van-tab--active) {
  font-size: 32rpx !important;
  font-weight: bold !important;
  color: #007aff !important;
}
:deep(.van-coupon-list__bottom .van-button) {
  font-size: 34rpx !important;
  font-weight: bold !important;
  height: 96rpx !important;
  line-height: 96rpx !important;
  border-radius: 48rpx !important;
  background: linear-gradient(to right, #82b1ff, #007aff) !important;
  box-shadow: 0 6px 14px rgba(0, 122, 255, 0.25) !important;
  margin-bottom: 30rpx;
}

/* 调整 van-coupon 内部容器样式 */
:deep(.van-coupon) {
  position: relative;
  padding-right: 30rpx !important; 
  overflow: visible !important; 
}

/* 修正右上角勾选图标的位置与大小 */
:deep(.van-coupon__corner) {
  right: 20rpx !important;    
  top: 50% !important;
  transform: translateY(-50%);
  width: 48rpx !important;    
  height: 48rpx !important;
  overflow: visible !important;
}




:deep(.van-checkbox) {
  padding-right: 10rpx !important; 
  overflow: visible !important; 
}

:deep(.van-checkbox__icon) {
  width: 48rpx !important;    
  height: 48rpx !important;
}

/* 银行卡列表弹窗样式 */
.card-list-popup {
  display: flex;
  flex-direction: column;
  height: 100%;
  padding: 30rpx;
}

.popup-header {
  padding: 30rpx;
  text-align: center;
  position: relative;
  border-bottom: 1px solid #f5f5f5;
}

.popup-title {
  font-size: 32rpx;
  font-weight: 500;
  color: #333;
}

.close-icon {
  position: absolute;
  top: 10rpx;
  right: 30rpx;
  font-size: 40rpx;
  color: #999;
  z-index: 10;
}

.card-list {
  flex: 1;
  overflow-y: auto;
  padding: 20rpx 0;
}

.loading-container,
.empty-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  height: 300rpx;
  gap: 20rpx;
}

.loading-text,
.empty-text {
  font-size: 28rpx;
  color: #999;
  margin-top: 20rpx;
}

.card-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-direction: row;
  padding: 40rpx;
  margin-bottom: 30rpx;
  background: linear-gradient(135deg, #f8f9fa, #e9ecef);
  border-radius: 20rpx;
  box-shadow: 0 6rpx 16rpx rgba(0, 0, 0, 0.08);
  transition: all 0.3s;
}

.card-selected {
  background: linear-gradient(135deg, #e6f7ff, #d0e8ff);
  border: 2rpx solid #007aff;
  transform: translateY(-4rpx);
  box-shadow: 0 10rpx 20rpx rgba(0, 122, 255, 0.15);
}

.card-left {
  display: flex;
  align-items: center;
  gap: 30rpx;
  flex-direction: row;
}

.card-icon {
  width: 100rpx;
  height: 100rpx;
  background: rgba(0, 122, 255, 0.1);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.card-info {
  display: flex;
  flex-direction: column;
}

.card-number {
  font-size: 36rpx;
  font-weight: 500;
  color: #333;
}

.card-expiry {
  font-size: 28rpx;
  color: #666;
  margin-top: 12rpx;
}

.card-action {
  padding: 30rpx 0;
  border-top: 1px solid #eee;
}

</style>