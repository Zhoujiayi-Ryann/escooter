<template>
  <view class="container">
	<view class="back-btn" @click="handleBack">
	  <van-icon name="arrow-left" class="back-icon"/>
	</view>
	  <view class="person-btn" @click="goToSettings" >
	    <van-icon name="manager" class="person-icon" />
	  </view>

<view class="map-container">
  <!-- 地图先渲染 -->
  <map
    id="orderMap"
    class="map"
    :latitude="location.lat"
    :longitude="location.lng"
    :markers="markers"
    :scale="16"
    show-location
    enable-3D
    enable-poi
    enable-overlooking
  />
  
  <!-- 覆盖层后渲染，确保透明，不阻挡交互 -->
  <cover-view class="map-overlay" />
</view>

    <!-- 订单详情浮动面板 -->
    <van-floating-panel v-model:height="panelHeight" :anchors="anchors" class="floating-panel">
      <view class="order-details">
        <!-- 订单标题 -->
    <view class="order-info">
      <text class="order-price">Completed</text>
      <view class="order-tags">
        <view class="badge">Order ID: {{ order.orderId }}</view>
        <view class="status-tag">Completed</view>
      </view>
    </view>

        <!-- 订单信息 -->
        <view class="info-box">
				<view class="info-item">
				  <text class="label">Scooter ID:</text>
				  <text class="value">SC{{ order.scooterId }}</text>
				</view>
				<view class="info-item">
				  <text class="label">Start Time:</text>
				  <text class="value">{{ order.startTime }}</text>
				</view>
				<view class="info-item">
				  <text class="label">End Time:</text>
				  <text class="value">{{ order.endTime }}</text>
				</view>
				<view class="info-item">
				  <text class="label">Duration:</text>
				  <text class="value">{{ order.duration }}</text>
				</view>
				<view class="divider"></view>
				<view class="info-item">
				  <text class="label">Cost:</text>
				  <text class="value">￡{{ order.cost }}</text>
				</view>

		  
        </view>

        <!-- 反馈按钮 -->
        <view class="button-group">
          <van-button class="half-button home-btn" type="default" @click="goHome">
            Return Home
          </van-button>
          <van-button class="half-button feedback-btn" type="primary" @click="goToFeedback">
            Give Feedback
          </van-button>
        </view>
      </view>
    </van-floating-panel>
  </view>
</template>

<script setup>
import { ref, onMounted } from "vue";
import { useRouter } from "vue-router";
import { orderApi } from "@/utils/api/order";

const router = useRouter();

// 🚲 订单信息
const order = ref({
  orderId: '',
  scooterId: '',
  startTime: '',
  endTime: '',
  duration: '',
  cost: 0,
  address: '',
});

// 📍 地图位置（偏移中心点）
const location = ref({ lat: 0, lng: 0 });
// 📌 地图标记
const markers = ref([]);

// 浮动面板高度锚点
const anchors = [
  120,
  Math.round(0.4 * window.innerHeight),
  Math.round(0.55 * window.innerHeight),
];
const panelHeight = ref(anchors[0]);

// 时间格式化 yyyy-MM-dd HH:mm
function formatToCST(utcStr) {
  if (!utcStr) return 'N/A';
  const date = new Date(utcStr);
  if (isNaN(date.getTime())) return 'Invalid Date';

  // 转为中国时间
  const offsetMs = 8 * 60 * 60 * 1000;
  const cstDate = new Date(date.getTime() + offsetMs);

  return `${cstDate.getFullYear()}-${(cstDate.getMonth() + 1).toString().padStart(2, '0')}-${cstDate.getDate().toString().padStart(2, '0')} ${cstDate.getHours().toString().padStart(2, '0')}:${cstDate.getMinutes().toString().padStart(2, '0')}`;
}

// 计算持续时间（start -> end）
function formatDuration(startStr, endStr) {
  const start = new Date(startStr);
  const end = new Date(endStr);
  if (isNaN(start) || isNaN(end)) return 'Unknown';

  const diffMs = end - start;
  const totalMinutes = Math.floor(diffMs / (1000 * 60));
  const hours = Math.floor(totalMinutes / 60);
  const minutes = totalMinutes % 60;
  return `${hours}h ${minutes}min`;
}

// ✅ 获取订单详情
// const fetchOrderDetail = async () => {
//   const rawId = router.currentRoute.value.query.orderId;
//   const orderId = Number(rawId);

//   try {
//     const res = await orderApi.getOrderDetail(orderId);
//     if (res.code === 1 && res.data) {
//       const data = res.data;

//       order.value = {
//         orderId: data.order_id,
//         scooterId: data.scooter_id,
//         startTime: formatTime(data.start_time),
//         endTime: formatTime(data.end_time),
//         duration: formatDuration(data.start_time, data.end_time),
//         cost: data.cost ?? 0,
//         address: data.address || 'Unknown',
//       };

//       const lat = data.location_lat;
//       const lng = data.location_lng;

//       if (!lat || !lng) {
//         uni.showToast({ title: '坐标无效', icon: 'none' });
//         return;
//       }

//       location.value = { lat, lng };

//       markers.value = [{
//         id: 1,
//         latitude: lat,
//         longitude: lng,
//         iconPath: "/static/order_details/maker.svg",
//         width: 32,
//         height: 32,
//         callout: {
//           content: order.value.address || `Scooter SC${order.value.scooterId}`,
//           display: 'ALWAYS',
//           fontSize: 15,
//           borderRadius: 5,
//           padding: 5,
//           bgColor: "#ffffff",
//           color: "#007aff",
//         }
//       }];
//     }
//   } catch (e) {
//     uni.showToast({ title: '网络异常', icon: 'none' });
//   }
// };
const fetchOrderDetail = async () => {
  const rawId = router.currentRoute.value.query.orderId;
  const orderId = Number(rawId);
  if (!orderId || isNaN(orderId)) {
    uni.showToast({ title: '订单 ID 无效', icon: 'none' });
    return;
  }

  try {
    const res = await orderApi.getOrderInfo(orderId);
    if (res.code === 1 && res.data) {
      const data = res.data;

      // 👇 确保后端字段正确
      const lat = data.scooter_info?.latitude;
      const lng = data.scooter_info?.longitude;

      // ✅ 如果坐标为空，给出提示
      if (!lat || !lng) {
        uni.showToast({ title: '车辆位置信息无效', icon: 'none' });
        return;
      }

      order.value = {
        orderId: data.order_id,
        scooterId: data.scooter_id,
        startTime: formatToCST(data.start_time),
        endTime: formatToCST(data.end_time),
        duration: formatDuration(data.start_time, data.end_time),
        cost: data.cost ?? 0,
        address: data.address || 'Unknown',
		scooterLocation: data.pickup_address || 'Unknown',
      };

      // ✅ 正确设置 location
      location.value = {
        lat,
        lng
      };

      loadScooterLocation();
    } else {
      uni.showToast({ title: res.msg || '订单获取失败', icon: 'none' });
    }
  } catch (err) {
    console.error('🚨 网络异常:', err);
    uni.showToast({ title: '网络异常，请稍后再试', icon: 'none' });
  }
};


const loadScooterLocation = () => {
  if (!location.value.lat || !location.value.lng) return;

  markers.value = [{
    id: 1,
    latitude: location.value.lat,
    longitude: location.value.lng,
    iconPath: '/static/order_details/maker.svg', 
    width: 32,
    height: 32,
    callout: {
      // ✅ 改这里：使用与页面中一致的地址
      content: order.value.scooterLocation,
      display: 'ALWAYS',
      fontSize: 15,
      borderRadius: 5,
      padding: 5,
      bgColor: "#ffffff",
      color: "#007aff"
    }
  }];
};

// 🔙 返回按钮
const handleBack = () => {
  if (getCurrentPages().length > 1) {
    uni.navigateBack();
  } else {
    uni.reLaunch({ url: '/pages/home/home' });
  }
};

// 👤 设置入口
const goToSettings = () => {
  uni.navigateTo({ url: '/pages/settings/my_settings/my_settings' });
};

// 🗣 反馈跳转
const goToFeedback = () => {
  uni.navigateTo({ url: '/pages/feedback/feedback' });
};
const goHome = () => {
  uni.reLaunch({ url: '/pages/home/home' });
};
// 挂载时加载数据
onMounted(() => {
  fetchOrderDetail();
});
</script>



<style scoped>

.back-btn{
  position: absolute;
  top: 50rpx;
  left: 60rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  background-color: #f4f8ff;
  border-radius: 25rpx;
  width: 80rpx;
  height: 80rpx;
}

.back-icon{
  font-size: 55rpx;  
  color: #0084ff;
}
.person-btn {
 position: absolute;
  top: 50rpx;
  right: 60rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  background-color: #f4f8ff;
  border-radius: 25rpx;
  width: 80rpx;
  height: 80rpx;
}

.person-icon{
  font-size: 55rpx;  
  color: #0084ff;
}
/* 地图容器 */
.map-container {
  width: 100%;
  height: 100vh;
  position: relative;
}

.map {
  width: 100%;
  height: 100%;
}

.map-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    to bottom,
    rgba(0, 123, 255, 0.2) 0%,   /* 顶部浅蓝色 */
    rgba(0, 123, 255, 0.1) 50%,  /* 中间更透明 */
    rgba(255, 255, 255, 0) 100%  /* 底部完全透明 */
  );
  pointer-events: none; /* 让地图仍可交互 */
  z-index: 2; /* 确保蒙层在地图上方 */
}

/* 浮动面板 - 磨砂玻璃风格 */
.floating-panel {
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(15px);
  border-radius: 20px 20px 0 0;
  box-shadow: 0 -5px 20px rgba(0, 0, 0, 0.1);
}

/* 订单详情 */
.order-details {
  padding: 20px;
}

/* 订单信息栏 */
.order-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-direction: row;
  font-size: 16px;
  font-weight: bold;
  padding-bottom: 10px;
  border-bottom: 1px solid rgba(255, 255, 255, 0.3);
}

.order-tags {
  display: flex;
  /* flex-direction: row; */
  align-items: center;
  gap: 10px;
}

.badge {
  background-color: #eee;
  padding: 4px 10px;
  border-radius: 12px;
  font-size: 12px;
  color: #444;
}

.status-tag {
  background-color: #007aff;
  color: white;
  padding: 4px 10px;
  font-size: 12px;
  border-radius: 12px;
}
.order-price {
  font-size: 25px;
  font-weight: bold;
  color:#0079fe;
}

/* 反馈按钮 */
.feedback-icon {
  font-size: 24px;
  color: #007aff;
  cursor: pointer;
}

/* 订单信息框 */
.info-box {
  background: rgba(229, 231, 245, 0.5);
  backdrop-filter: blur(25px);
  padding: 30px;
  border-radius: 15px;
  margin-top: 15px;
  border: 1px solid #82b1ff;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

/* 每行信息 */
.info-item {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  margin-bottom: 8px;
}

/* 信息标签 */
.label {
  font-size: 17px;
  color: #33;
  
  font-weight: bold;
}

/* 信息值 */
.value {
  font-size: 14px;
  color: #666;
  font-weight: 500;
}
/* 分割线 */
.divider {
  width: 100%;
  height: 1px;
  background-color: #ddd;
  margin: 25px 0;
}


/* 反馈按钮 */
.feedback-btn {
  border-radius: 25px;
  font-size: 34rpx;
  /* font-weight: bold; */
  height: 96rpx;
  background: linear-gradient(to right, #82b1ff, #007aff);
  color: white;
  box-shadow: 0 4px 10px rgba(0, 122, 255, 0.2);
}

/* 按钮点击动画 */

.button-group {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  gap: 20rpx;
  margin-top: 20px;
}

.half-button {
  flex: 1;
  height: 96rpx;
  border-radius: 25px;
  font-size: 32rpx;
  font-weight: 500;
}
.half-button:active {
  transform: scale(0.98);
}

.home-btn{
	border-radius: 25px;
	font-size: 34rpx;
	/* font-weight: bold; */
	height: 96rpx;
	background: #e7edf1;
	color: #0084ff;
	border: 1px solid rgba(255, 255, 255, 0.3);
	border: 1px solid #82b1ff;
}
</style>
