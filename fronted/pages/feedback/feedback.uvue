<template>
	<view class="feedback-container">
		    <view class="header">
		      <view class="back-btn" @click="handleBack">
		        <van-icon name="arrow-left" class="back-icon" />
		      </view>
		      <text class="header-title">Submit Feedback</text>
		    </view>
		<view class="section">
			<picker @change="onTypeChange" :value="typeIndex" :range="typeArray">
				<text class="label">Feedback Type</text>
				<view class="picker">
					{{typeArray[typeIndex]}}
					<text class="picker-arrow">▼</text>
				</view>
			</picker>
		</view>
		
		<view class="section">
			<text class="label">Description</text>
			<textarea v-model="description" placeholder="Please explain your problems" class="textarea"></textarea>
			<view class="image-upload">
				<view v-for="(item, index) in images" :key="index" class="image-wrapper">
					<image :src="item" class="preview-image" mode="aspectFill" @click="previewImage(index)"></image>
					<view class="delete-btn" @click.stop="deleteImage(index)">×</view>
				</view>
				<view class="upload-btn" @click="chooseImage" v-if="images.length < 3">
					<text class="upload-icon">+</text>
				</view>
			</view>
		</view>
		
		<view class="section">
			<text class="label">Happening Time (optimal)</text>
			<picker mode="multiSelector" :value="dateArr" :range="dateRange" @change="onDateChange" @columnchange="onDateColumnChange" cancel-text="Cancel" confirm-text="Confirm">
				<view class="picker">
					{{date || 'Please select time'}}
					<text class="picker-arrow">▼</text>
				</view>
			</picker>
		</view>
		
		<view class="section">
			<text class="label">Relevant Bill (optimal)</text>
			<input type="text" v-model="orderNumber" placeholder="Please input bill number" class="input" />
		</view>
		
		<button class="submit-btn" @click="submitFeedback">Submit Feedback</button>
	</view>
</template>

<script>
import { feedbackApi } from '../../utils/api/feedback/index.uts';
import { FeedbackType } from '../../utils/api/types';
import { userApi } from '../../utils/api/user/index.uts';
import { uploadApi } from '../../utils/api/upload/index.uts';

export default {
  data() {
	  const date = new Date()
	      const years = Array.from({length: 10}, (_, i) => date.getFullYear() - 5 + i)
	      const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
	      const days = Array.from({length: 31}, (_, i) => i + 1)
    return {
      typeArray: ['Using Problems', 'Experience Feedback'],
      typeIndex: 0,
      description: '',
      images: [],
      date: '',
	  dateArr: [5, date.getMonth(), date.getDate() - 1],
	        dateRange: [years, months, days],
      orderNumber: '',
      isSubmitting: false,
      uploadedImageUrls: []
    };
  },
  methods: {
    onTypeChange(e) {
      this.typeIndex = e.detail.value;
	  },
	  	onDateColumnChange(e) {
	        const { column, value } = e.detail
	        const currentDate = new Date()
	        const tempDateArr = [...this.dateArr]
	        tempDateArr[column] = value
	        
	        // 根据年月更新天数
	        if (column === 0 || column === 1) {
	          const year = this.dateRange[0][tempDateArr[0]]
	          const month = tempDateArr[1] + 1
	          const daysInMonth = new Date(year, month, 0).getDate()
	          this.dateRange[2] = Array.from({length: daysInMonth}, (_, i) => i + 1)
	          
	          // 如果当前选择的日期超过了新的月份最大天数，则调整为最后一天
	          if (tempDateArr[2] >= daysInMonth) {
	            tempDateArr[2] = daysInMonth - 1
	          }
	        }
	        
	        this.dateArr = tempDateArr
    },
    onDateChange(e) {
       const [yearIndex, monthIndex, dayIndex] = e.detail.value
            const year = this.dateRange[0][yearIndex]
            const month = monthIndex + 1
            const day = this.dateRange[2][dayIndex]
            
            this.date = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`
            this.formatDate = `${this.dateRange[1][monthIndex]} ${day}, ${year}`
    },
    async chooseImage() {
      try {
        const res = await uni.chooseImage({
          count: 3 - this.images.length,
          sizeType: ['compressed'],
          sourceType: ['album', 'camera']
        });
        this.images = [...this.images, ...res.tempFilePaths];
      } catch (err) {
        console.error('Failed to choose image:', err);
      }
    },
    previewImage(index) {
      uni.previewImage({
        urls: this.images,
        current: index
      });
    },
    deleteImage(index) {
      uni.showModal({
        title: 'Confirm Deletion',
        content: 'Are you sure you want to delete this image?',
        success: (res) => {
          if (res.confirm) {
            this.images.splice(index, 1);
            if (this.uploadedImageUrls.length > index) {
              this.uploadedImageUrls.splice(index, 1);
            }
          }
        }
      });
    },
    async submitFeedback() {
      if (!this.description) {
        uni.showToast({
          title: 'Please describe the issue',
          icon: 'none'
        });
        return;
      }

      if (this.isSubmitting) return;
      this.isSubmitting = true;

      uni.showLoading({
        title: 'Submitting...'
      });

      try {
        if (this.images.length > 0) {
          try {
            uni.showLoading({ title: 'Uploading images...' });
            this.uploadedImageUrls = await uploadApi.uploadFeedbackImages(this.images);
            console.log('Uploaded images:', this.uploadedImageUrls);
          } catch (error) {
            console.error('Image upload failed:', error);
            uni.hideLoading();
            uni.showToast({
              title: 'Failed to upload images',
              icon: 'none'
            });
            this.uploadedImageUrls = [];
          }
        }

        const userId = userApi.getUserId();
        if (!userId) throw new Error('User ID not found. Please log in.');

        const feedbackData = {
          user_id: userId,
          feedback_type: this.typeIndex === 0 ? FeedbackType.USING_PROBLEM : FeedbackType.EXPERIENCE_FEEDBACK,
          description: this.description,
          bill_number: this.orderNumber || undefined
        };

        if (this.date) {
          feedbackData.happening_time = this.date;
        }

        if (this.uploadedImageUrls.length > 0) {
          feedbackData.image_urls = this.uploadedImageUrls;
        }

        console.log('Submitting feedback data:', feedbackData);

        uni.showLoading({
          title: 'Submitting feedback...'
        });

        const response = await feedbackApi.submitFeedback(feedbackData);

        uni.hideLoading();

        if (response.code === 1) {
          uni.showToast({
            title: 'Submitted successfully!',
            icon: 'success'
          });

          this.description = '';
          this.images = [];
          this.uploadedImageUrls = [];
          this.date = '';
          this.orderNumber = '';

          setTimeout(() => {
            uni.navigateBack();
          }, 1500);
        } else {
          throw new Error(response.msg || 'Submission failed');
        }
      } catch (err) {
        console.error('Feedback submission failed:', err);
        uni.hideLoading();
        uni.showToast({
          title: err.message || 'Submission failed',
          icon: 'none'
        });
      } finally {
        this.isSubmitting = false;
      }
    },
    handleBack() {
      const pages = getCurrentPages();
      if (pages.length > 1) {
        uni.navigateBack();
      } else {
        uni.reLaunch({ url: '/pages/settings/my_settings/my_settings' });
      }
    }
  }
};
</script>


<style>
	.feedback-container {
	  padding: 20px;
	  background: linear-gradient(to bottom, #e0f0ff, #ffffff);
	  min-height: 100vh;
	  display: flex;
	  flex-direction: column;
	  gap: 18rpx;
	}
	
	.section {
		margin-bottom: 20px;
	}
	.header {
	  background-color: #ffffff;
	  padding: 40rpx 0;
	  text-align: center;
	  border-radius: 20rpx;
	  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
	  position: relative;
	  margin-bottom: 30rpx;
	}
	
	.back-btn {
	  position: absolute;
	  top: 25rpx;
	  left: 30rpx;
	  display: flex;
	  align-items: center;
	  justify-content: center;
	  cursor: pointer;
	  z-index: 10;
	  background-color: #f4f8ff;
	  border-radius: 25rpx;
	  width: 80rpx;
	  height: 80rpx;
	}
	
	.back-icon {
	  font-size: 55rpx;
	  color: #0084ff;
	}
	
	.header-title {
	  font-size: 40rpx;
	  font-weight: bold;
	  color: #007aff;
	  text-align: center;
	}

	.label {
		display: block;
		font-size: 14px;
		color: #333;
		margin-bottom: 8px;
	}
	
	.picker {
		height: 40px;
		line-height: 40px;
		border: 1px solid #ddd;
		border-radius: 4px;
		padding: 0 10px;
		position: relative;
	}
	
	.picker-arrow {
		position: absolute;
		right: 10px;
		color: #999;
	}
	
	.textarea {
		width: 100%;
		height: 120px;
		border: 1px solid #ddd;
		border-radius: 4px;
		padding: 10px;
		box-sizing: border-box;
	}
	
	.image-upload {
		display: flex;
		flex-direction: row;
		flex-wrap: nowrap;
		margin-top: 10px;
		gap: 10px;
		overflow-x: auto;
		padding-bottom: 5px;
	}
	
	.image-wrapper {
		position: relative;
		width: 90px;
		height: 90px;
		overflow: hidden;
		flex-shrink: 0;
	}
	
	.preview-image {
		width: 100%;
		height: 100%;
		border-radius: 4px;
		object-fit: cover;
	}
	
	.delete-btn {
		position: absolute;
		top: 4px;
		right: 4px;
		width: 24px;
		height: 24px;
		background-color: rgba(0, 0, 0, 0.6);
		color: #fff;
		font-size: 18px;
		font-weight: bold;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		z-index: 10;
		box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
	}
	
	.upload-btn {
		width: 90px;
		height: 90px;
		border: 1px dashed #ddd;
		display: flex;
		align-items: center;
		justify-content: center;
		border-radius: 4px;
	}
	
	.upload-icon {
		font-size: 30px;
		color: #999;
	}
	
	.input {
		height: 40px;
		border: 1px solid #ddd;
		border-radius: 4px;
		padding: 0 10px;
	}
	
	.submit-btn {
		margin-top: 30px;
		background-color: #007AFF;
		color: #fff;
		border-radius: 4px;
	}
	
	.section {
	  background: #ffffff;
	  padding: 30rpx;
	  border-radius: 24rpx;
	  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
	}
	
	.label {
	  font-size: 32rpx;
	  font-weight: bold;
	  color: #333;
	  margin-bottom: 20rpx;
	}
	
	.picker,
	.textarea,
	.input {
	  font-size: 30rpx;
	  border: none;
	  background-color: transparent;
	  width: 100%;
	  color: #111;
	}
	
	.picker {
	  padding: 20rpx 0;
	  border-bottom: 2rpx solid #ccc;
	}
	
	.textarea {
	  height: 150rpx;
	  resize: none;
	  border-radius: 12rpx;
	  background-color: #f9f9f9;
	  padding: 20rpx;
	  line-height: 1.6;
	  box-sizing: border-box;
	}
	
	.input {
	  padding: 20rpx 0;
	  border-bottom: 2rpx solid #ccc;
	}
	
	.image-upload {
	  display: flex;
	  gap: 20rpx;
	  margin-top: 20rpx;
	}
	
	.image-wrapper {
	  position: relative;
	  width: 160rpx;
	  height: 160rpx;
	  border-radius: 12rpx;
	  overflow: hidden;
	  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
	}
	
	.preview-image {
	  width: 100%;
	  height: 100%;
	  object-fit: cover;
	}
	
	.upload-btn {
	  width: 160rpx;
	  height: 160rpx;
	  background-color: #f4f4f4;
	  border: 2rpx dashed #ccc;
	  display: flex;
	  justify-content: center;
	  align-items: center;
	  border-radius: 12rpx;
	  font-size: 50rpx;
	  color: #888;
	}
	
	.delete-btn {
	  position: absolute;
	  top: 6rpx;
	  right: 6rpx;
	  background: rgba(0, 0, 0, 0.6);
	  color: white;
	  width: 40rpx;
	  height: 40rpx;
	  border-radius: 50%;
	  text-align: center;
	  line-height: 40rpx;
	  font-weight: bold;
	  z-index: 10;
	}
	
	.submit-btn {
	  margin-top: 40rpx;
	  height: 90rpx;
	  line-height: 90rpx;
	  font-size: 32rpx;
	  /* font-weight: bold; */
	  background: linear-gradient(to right, #82b1ff, #007aff);
	  color: #ffffff;
	  border-radius: 70rpx;
	  box-shadow: 0px 4px 10px rgba(0, 122, 255, 0.3);
	}

</style>
