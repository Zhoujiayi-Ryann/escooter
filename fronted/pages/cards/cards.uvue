<template>
	<view class="cards-container">
		<view class="header">
		  <view class="back-btn" @click="handleBack">
		    <van-icon name="arrow-left" class="back-icon" />
		  </view>
		  <text class="header-title">Cards</text>
		</view>
		<!-- Âä†ËΩΩÁä∂ÊÄÅ -->
		<view v-if="loading" class="loading-container">
			<text class="loading-text">Loading...</text>
		</view>
		
		<!-- Âç°ÁâáÂàóË°® -->
		<view v-else-if="cards && cards.length > 0" class="card-list">
			<view v-for="(card, index) in cards" :key="index" class="card-item">
				<view class="card-info">
					<text class="card-country">{{ card.country }}</text>
					<view class="card-number-container">
						<text class="card-number">
							{{ formatCardNumber(card.card_number) }}
						</text>
					</view>
					<view class="card-expires">
						<text class="expires-label">Valid Thru:</text>
						<text class="expires-date">{{ formatExpiryDate(card.expiry_date) }}</text>
					</view>
				</view>
				
				<!-- Âà†Èô§ÊåâÈíÆ -->
				<view class="delete-btn" @click.stop="deleteCard(card.card_id)">
					<text class="delete-icon">√ó</text>
				</view>
			</view>
		</view>
		
		<!-- Êó†Âç°ÁâáÊèêÁ§∫ -->
		<view v-else class="empty-state">
			<view class="empty-icon">üí≥</view>
			<text class="empty-text">No cards found</text>
			<text class="empty-subtext">Add a card to enable payment</text>
		</view>
		
		<!-- Ê∑ªÂä†Âç°ÁâáÊåâÈíÆ -->
		<view class="add-card" @click="addNewCard">
			<text class="add-icon">+</text>
			<text class="add-text">Add New Card</text>
		</view>
	</view>
</template>

<script>
	import { creditCardApi } from '../../utils/api/creditCard';
	import { userApi } from '../../utils/api/user';
	
	export default {
		data() {
			return {
				cards: [],
				loading: true,
				error: null
			}
		},
		onShow() {
			this.fetchCards();
		},
		methods: {
			// Ëé∑ÂèñÈì∂Ë°åÂç°ÂàóË°®
			fetchCards() {
				this.loading = true;
				this.error = null;
				
				// Ëé∑ÂèñÂΩìÂâçÁî®Êà∑ID
				const userId = userApi.getUserId();
				
				// Â¶ÇÊûúÊú™ÁôªÂΩïÔºåË∑≥ËΩ¨Âà∞ÁôªÂΩïÈ°µ
				if (userId === 0) {
					uni.navigateTo({
						url: '/pages/login/login'
					});
					return;
				}
				
				// Ë∞ÉÁî®APIËé∑ÂèñÈì∂Ë°åÂç°ÂàóË°®
				creditCardApi.getUserCreditCards(userId).then(res => {
					this.loading = false;
					
					if (res.code === 1) {
						this.cards = res.data;
						console.log('Successfully obtained bank card:', this.cards);
					} else {
						this.error = res.message || 'Failed to obtain bank card';
						uni.showToast({
							title: this.error,
							icon: 'none'
						});
					}
				}).catch(err => {
					this.loading = false;
					this.error = 'Network error, please try again later';
					
					uni.showToast({
						title: this.error,
						icon: 'none'
					});
					console.error('Error in obtaining bank card:', err);
				});
			},
			
			// Ê∑ªÂä†Êñ∞Èì∂Ë°åÂç°
			addNewCard() {
				uni.navigateTo({
					url: '/pages/settings/card/card'
				});
			},
			
			// Âà†Èô§Èì∂Ë°åÂç°
			deleteCard(cardId) {
				uni.showModal({
					title: 'Delete Card',
					content: 'Are you sure you want to delete this card?Ôºü',
					success: (res) => {
						if (res.confirm) {
							const userId = userApi.getUserId();
							
							uni.showLoading({
								title: 'Deleting...'
							});
							
							creditCardApi.deleteCreditCard(cardId, userId).then(res => {
								uni.hideLoading();
								
								if (res.code === 1) {
									uni.showToast({
										title: 'Delete Success',
										icon: 'success'
									});
									// ÈáçÊñ∞Ëé∑ÂèñÈì∂Ë°åÂç°ÂàóË°®
									this.fetchCards();
								} else {
									uni.showToast({
										title: res.message || 'Delete Fail',
										icon: 'none'
									});
								}
							}).catch(err => {
								uni.hideLoading();
								uni.showToast({
									title: 'Network error, please try again later',
									icon: 'none'
								});
								console.error('Delete bank card error:', err);
							});
						}
					}
				});
			},
			handleBack() {
			  const pages = getCurrentPages();
			  if (pages.length > 1) {
			    uni.navigateBack();
			  } else {
			    uni.reLaunch({ url: '/pages/settings/my_settings/my_settings' });
			  }
			},
			
			// Ê†ºÂºèÂåñÈì∂Ë°åÂç°Âè∑ÔºåÂè™ÊòæÁ§∫ÂêéÂõõ‰Ωç
			formatCardNumber(cardNumber) {
				if (!cardNumber) return '';
				return '‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ‚Ä¢‚Ä¢‚Ä¢‚Ä¢ ' + cardNumber.slice(-4);
			},
			
			// Ê†ºÂºèÂåñÂà∞ÊúüÊó•Êúü
			formatExpiryDate(date) {
				if (!date) return '';
				// È¢ÑÊúüÊ†ºÂºè: 2025-12-31ÔºåËΩ¨Êç¢‰∏∫ 12/25
				const parts = date.split('-');
				if (parts.length >= 2) {
					const month = parts[1];
					const year = parts[0].slice(-2);
					return `${month}/${year}`;
				}
				return date;
			}
		}
	}
</script>

<style>
.cards-container {
	padding: 40rpx;
	background: linear-gradient(to bottom, #e0f0ff, #ffffff);
	min-height: 100vh;
}
.back-btn {
	  position: absolute;
	  top: 25rpx;
	  left: 30rpx;
	  display: flex;
	  align-items: center;
	  justify-content: center;
	  cursor: pointer;
	  z-index: 10;
	  background-color: #f4f8ff;
	  border-radius: 25rpx;
	  width: 80rpx;
	  height: 80rpx;
	}
	
	.back-icon {
	  font-size: 55rpx;
	  color: #0084ff;
	}
	
	.header-title {
	  font-size: 40rpx;
	  font-weight: bold;
	  color: #007aff;
	  text-align: center;
	}
	.header {
	  background-color: #ffffff;
	  padding: 40rpx 0;
	  text-align: center;
	  border-radius: 20rpx;
	  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
	  position: relative;
	  margin-bottom: 30rpx;
	}
.loading-container {
	display: flex;
	justify-content: center;
	align-items: center;
	height: 400rpx;
}

.loading-text {
	font-size: 32rpx;
	color: #666;
}

.card-list {
	margin: 20rpx 0;
}

.card-item {
	margin-bottom: 30rpx;
	padding: 40rpx;
	border-radius: 25rpx;
	background: linear-gradient(135deg, #0396FF, #0D47A1);
	box-shadow: 0 10rpx 20rpx rgba(3, 150, 255, 0.2);
	position: relative;
	overflow: hidden;
}

.card-info {
	display: flex;
	flex-direction: column;
	gap: 20rpx;
	position: relative;
	z-index: 1;
}

.card-country {
	font-size: 28rpx;
	color: rgba(255, 255, 255, 0.8);
	text-transform: uppercase;
	letter-spacing: 2rpx;
}

.card-number-container {
	display: flex;
	align-items: center;
	justify-content: space-between;
	margin: 20rpx 0;
}

.card-number {
	font-size: 36rpx;
	letter-spacing: 4rpx;
	color: #ffffff;
	font-family: monospace;
	text-shadow: 0 2rpx 4rpx rgba(0, 0, 0, 0.1);
}

.card-expires {
	display: flex;
	align-items: center;
	gap: 10rpx;
}

.expires-label {
	font-size: 24rpx;
	color: rgba(255, 255, 255, 0.7);
}

.expires-date {
	font-size: 26rpx;
	color: #ffffff;
	font-weight: bold;
}

/* Âà†Èô§ÊåâÈíÆ */
.delete-btn {
	position: absolute;
	top: 20rpx;
	right: 20rpx;
	width: 60rpx;
	height: 60rpx;
	border-radius: 30rpx;
	background-color: rgba(255, 255, 255, 0.2);
	display: flex;
	align-items: center;
	justify-content: center;
	z-index: 2;
}

.delete-icon {
	font-size: 40rpx;
	color: #ffffff;
}

/* Á©∫Áä∂ÊÄÅ */
.empty-state {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	padding: 100rpx 0;
}

.empty-icon {
	font-size: 120rpx;
	margin-bottom: 30rpx;
}

.empty-text {
	font-size: 32rpx;
	color: #333;
	font-weight: bold;
	margin-bottom: 10rpx;
}

.empty-subtext {
	font-size: 28rpx;
	color: #666;
}

/* Ë£ÖÈ•∞ÊÄßÂúÜÂúà */
.card-item::before {
	content: '';
	position: absolute;
	top: -100rpx;
	right: -100rpx;
	width: 300rpx;
	height: 300rpx;
	background: rgba(255, 255, 255, 0.1);
	border-radius: 50%;
}

.card-item::after {
	content: '';
	position: absolute;
	bottom: -150rpx;
	left: -150rpx;
	width: 400rpx;
	height: 400rpx;
	background: rgba(255, 255, 255, 0.05);
	border-radius: 50%;
}

.add-card {
	display: flex;
	align-items: center;
	padding: 40rpx;
	background-color: #ffffff;
	border-radius: 25rpx;
	margin-top: 40rpx;
	box-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.05);
	border: 2rpx solid rgba(0, 0, 0, 0.05);
	transition: all 0.3s ease;
}

.add-card:active {
	transform: scale(0.98);
	background-color: #f8f9fa;
}

.add-icon {
	font-size: 44rpx;
	margin-right: 20rpx;
	color: #0396FF;
}

.add-text {
	font-size: 32rpx;
	flex: 1;
	color: #333;
	font-weight: 500;
}
</style>
