<template>
	<view class="coupon-page">
		<!-- 顶部导航栏 -->
		<view class="header">
			<view class="back-btn" @click="navigateBack">
				<van-icon name="arrow-left" class="back-icon"/>
			</view>
			<text class="header-title">My Coupons</text>
		</view>
		
		<!-- 使用Vant Tabs组件 -->
		<van-tabs v-model:active="activeTab" animated swipeable sticky>
			<van-tab title="Available">
				<!-- 可用优惠券列表 -->
				<view class="coupon-list" v-if="coupons.length > 0">
					<view class="coupon-item" v-for="(coupon, index) in coupons" :key="coupon.id">
						<view class="coupon-card">
							<view class="coupon-left">
								<view class="coupon-amount">
									<text class="currency">£</text>
									<text class="value">{{ coupon.denominations }}</text>
								</view>
								<text class="coupon-condition">{{ coupon.condition }}</text>
							</view>
							<view class="coupon-right">
								<text class="coupon-name">{{ coupon.coupon_name }}</text>
								<text class="coupon-desc">{{ coupon.description }}</text>
								<text class="coupon-date">Valid until: {{ formatDate(coupon.endAt) }}</text>
							</view>
						</view>
					</view>
				</view>
				
				<!-- 空状态 -->
				<view class="empty-state" v-else>
					<image src="/static/icons/empty-coupon.png" class="empty-icon" mode="aspectFit"></image>
					<text class="empty-text">No Available Coupons</text>
				</view>
			</van-tab>
			
			<van-tab title="Unavailable">
				<!-- 过期优惠券列表 -->
				<view class="coupon-list disabled" v-if="disabledCoupons.length > 0">
					<view class="coupon-item disabled" v-for="(coupon, index) in disabledCoupons" :key="coupon.id">
						<view class="coupon-card">
							<view class="coupon-left">
								<view class="coupon-amount">
									<text class="currency">£</text>
									<text class="value">{{ coupon.denominations }}</text>
								</view>
								<text class="coupon-condition">{{ coupon.condition }}</text>
							</view>
							<view class="coupon-right">
								<text class="coupon-name">{{ coupon.coupon_name }}</text>
								<text class="coupon-desc">{{ coupon.description }}</text>
								<text class="coupon-date">Unavailable: {{ formatDate(coupon.endAt) }}</text>
							</view>
						</view>
					</view>
				</view>
				
				<!-- 空状态 -->
				<view class="empty-state" v-else>
					<image src="/static/icons/empty-coupon.png" class="empty-icon" mode="aspectFit"></image>
					<text class="empty-text">No unavailable Coupons</text>
				</view>
			</van-tab>
		</van-tabs>
	</view>
</template>

<script>
import { couponApi } from '@/utils/api/coupon';
import { userApi } from '@/utils/api/user';

export default {
  data() {
    return {
      activeTab: 0, // Default tab: available coupons
      coupons: [],
      disabledCoupons: [],
      loading: false
    };
  },
  onLoad() {
    this.fetchCoupons();
  },
  methods: {
    navigateBack() {
      const pages = getCurrentPages();
      if (pages.length > 1) {
        // If there is a previous page, navigate back
        uni.navigateBack({
          delta: 1
        });
      } else {
        // If no previous page, redirect to home
        uni.navigateTo({
          url: '/pages/home/home'
        });
      }
    },
    formatDate(timestamp) {
      const date = new Date(timestamp * 1000);
      return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
    },
    async fetchCoupons() {
      this.loading = true;

      // Get user ID from userApi, default to 0 if not logged in
      const userId = userApi.getUserId(0);

      // Check if user_id field is present
      if (userId === 0) {
        // Try to get user_id from user info
        const userInfo = userApi.getUserInfo();
        if (userInfo && userInfo.user_id) {
          console.log('Using user_id from user info:', userInfo.user_id);
          this.fetchCouponsWithUserId(userInfo.user_id);
        } else {
          // User not logged in, show a message or redirect
          uni.showToast({
            title: 'Please log in first',
            icon: 'none'
          });
          this.loading = false;
        }
        return;
      }

      // Continue to fetch coupons using retrieved userId
      this.fetchCouponsWithUserId(userId);
    },
    async fetchCouponsWithUserId(userId) {
      try {
        console.log('Fetching coupons for userId:', userId);
        const response = await couponApi.getAvailableCoupons(userId);
        console.log('Coupon API response:', response);

        if (response.code === 1 && response.data) {
          const now = new Date();

          // Handle "coupons" property from response
          const coupons = Array.isArray(response.data) ? response.data : (response.data.coupons || []);

          this.coupons = coupons.filter(coupon =>
            new Date(coupon.valid_to) > now &&
            coupon.is_active === true &&
            coupon.is_used === false &&
            coupon.status === "able"
          ).map(coupon => this.formatCouponData(coupon));

          this.disabledCoupons = coupons.filter(coupon =>
            new Date(coupon.valid_to) <= now ||
            coupon.is_active !== true ||
            coupon.is_used === true ||
            coupon.status !== "able"
          ).map(coupon => this.formatCouponData(coupon));

          console.log('Available coupons:', this.coupons);
          console.log('Unavailable coupons:', this.disabledCoupons);
        } else {
          uni.showToast({
            title: 'Failed to retrieve coupons',
            icon: 'none'
          });
        }
      } catch (error) {
        console.error('Failed to retrieve coupons:', error);
        uni.showToast({
          title: 'Failed to retrieve coupons. Please try again.',
          icon: 'none'
        });
      } finally {
        this.loading = false;
      }
    },
    formatCouponData(coupon) {
      return {
        id: coupon.coupon_id,
        coupon_name: coupon.coupon_name,
        name: coupon.coupon_name,
        denominations: coupon.coupon_amount || 0, // Use original amount directly
        condition: coupon.min_spend > 0 ? `MinSpent £${coupon.min_spend}` : 'No MinSpent',
        originCondition: coupon.min_spend || 0,
        startAt: coupon.valid_from ? new Date(coupon.valid_from).getTime() / 1000 : Date.now() / 1000,
        endAt: coupon.valid_to ? new Date(coupon.valid_to).getTime() / 1000 : (Date.now() / 1000 + 86400 * 30),
        valueDesc: `£${coupon.coupon_amount || 0}`,
        description: coupon.description || 'Rent Coupon'
      };
    }
  }
};
</script>


<style>
.coupon-page {
	background: linear-gradient(to bottom, #f0faff, #ffffff);
	min-height: 100vh;
	padding: 30rpx;
	box-sizing: border-box;
	display: flex;
	flex-direction: column;
	gap: 25rpx;
}

.header {
	background-color: #ffffff;
	padding: 40rpx 0;
	text-align: center;
	border-radius: 20rpx;
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
	position: relative;
	margin-bottom: 30rpx;
}

.back-btn {
	position: absolute;
	top: 25rpx;
	left: 30rpx;
	display: flex;
	align-items: center;
	justify-content: center;
	cursor: pointer;
	z-index: 10;
	background-color: #f4f8ff;
	border-radius: 25rpx;
	width: 80rpx;
	height: 80rpx;
}

.back-icon {
	font-size: 55rpx;  
	color: #0084ff;
}

.header-title {
	font-size: 40rpx;
	font-weight: bold;
	color: #007aff;
	text-align: center;
}

.coupon-list {
	display: flex;
	flex-direction: column;
	gap: 20rpx;
	padding: 20rpx;
}

.coupon-item {
	background: #ffffff;
	border-radius: 18rpx;
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
	overflow: hidden;
}

.coupon-card {
	display: flex;
	position: relative;
	flex-direction: row;
	padding: 30rpx;
	background: #ffffff;
}

.coupon-left {
	display: flex;
	flex-direction: column;
	justify-content: center;
	align-items: center;
	padding-right: 30rpx;
	border-right: 1px dashed #e8e8e8;
	min-width: 180rpx;
}

.coupon-amount {
	display: flex;
	align-items: baseline;
}

.currency {
	font-size: 32rpx;
	color: #ff6666;
}

.value {
	font-size: 60rpx;
	font-weight: bold;
	color: #ff6666;
}

.coupon-condition {
	font-size: 24rpx;
	color: #888;
	margin-top: 8rpx;
}

.coupon-right {
	flex: 1;
	padding-left: 30rpx;
	display: flex;
	flex-direction: column;
	justify-content: space-between;
}

.coupon-name {
	font-size: 32rpx;
	font-weight: bold;
	color: #333;
	margin-bottom: 10rpx;
}

.coupon-desc {
	font-size: 28rpx;
	color: #666;
	margin-bottom: 10rpx;
}

.coupon-date {
	font-size: 24rpx;
	color: #999;
}

.disabled .coupon-card {
	filter: grayscale(1);
	opacity: 0.7;
}

.expired-mark {
	position: absolute;
	top: 50%;
	right: 30rpx;
	transform: translateY(-50%) rotate(-30deg);
	color: #ff0000;
	font-size: 40rpx;
	font-weight: bold;
	border: 3rpx solid #ff0000;
	padding: 5rpx 15rpx;
	border-radius: 8rpx;
}

.empty-state {
	display: flex;
	flex-direction: column;
	align-items: center;
	justify-content: center;
	padding: 100rpx 0;
}

.empty-icon {
	width: 200rpx;
	height: 200rpx;
	margin-bottom: 30rpx;
}

.empty-text {
	font-size: 30rpx;
	color: #999;
}

/* 自定义Vant Tabs样式 */
:deep(.van-tabs__wrap) {
	background-color: #ffffff;
	border-radius: 20rpx;
	box-shadow: 0 4px 12px rgba(0, 0, 0, 0.03);
	margin-bottom: 20rpx;
}

:deep(.van-tab) {
	font-size: 30rpx;
	color: #666;
}

:deep(.van-tab--active) {
	font-size: 32rpx;
	font-weight: bold;
	color: #007aff;
}

:deep(.van-tabs__line) {
	background-color: #007aff;
	height: 6rpx;
	border-radius: 3rpx;
}

:deep(.van-tabs__content) {
	padding-bottom: 40rpx;
}
</style>