<template>
  <view class="edit-profile-page">
    <!-- ËøîÂõûÊåâÈíÆ -->
	<view class="header">
		<view class="back-btn" @click="handleBack">
		 <van-icon name="arrow-left" class="back-icon"/>
		</view>
	  <text class="header-title">Edit Profile</text>
	</view>

    <!-- Â§¥ÂÉèÂå∫Âüü -->
    <!-- Â§¥ÂÉèÊòæÁ§∫‰∏é‰øÆÊîπÂå∫Âüü -->
    <view class="form-item avatar-form">
      <view class="label">Avatar</view>
      <view class="avatar-preview" @click="chooseAvatar">
        <image class="avatar-img" :src="user.avatar_path || defaultAvatar" mode="aspectFill" />

      </view>
    </view>


    <!-- Ë°®ÂçïÂ≠óÊÆµ -->
    <view class="form-item" :class="{ focused: editing === 'name' }">
      <view class="label">Name</view>
      <input v-if="editing === 'name'" v-model="form.name" class="input" placeholder="Enter name" />
      <view v-else class="value">{{ user.username }}</view>
      <van-button size="small" :type="editing === 'name' ? 'success' : 'primary'" class="edit-btn" @click="toggleEdit('name')">
        {{ editing === 'name' ? 'Save' : 'Edit' }}
      </van-button>
    </view>

    <view class="form-item" :class="{ focused: editing === 'email' }">
      <view class="label">Email</view>
      <input v-if="editing === 'email'" v-model="form.email" class="input" placeholder="Enter email" />
      <view v-else class="value">{{ user.email }}</view>
      <van-button size="small" :type="editing === 'email' ? 'success' : 'primary'" class="edit-btn" @click="toggleEdit('email')">
        {{ editing === 'email' ? 'Save' : 'Edit' }}
      </van-button>
    </view>

    <view class="form-item" :class="{ focused: editing === 'phone' }">
      <view class="label">Phone</view>
      <input v-if="editing === 'phone'" v-model="form.phone" class="input" placeholder="Enter phone" />
      <view v-else class="value">{{ user.phoneNumber }}</view>
      <van-button size="small" :type="editing === 'phone' ? 'success' : 'primary'" class="edit-btn" @click="toggleEdit('phone')">
        {{ editing === 'phone' ? 'Save' : 'Edit' }}
      </van-button>
    </view>

    <view class="form-item">
      <view class="label">Password</view>
      <view class="value">************</view>
      <van-button
        size="small"
        type="primary"
        class="edit-btn"
        @click="goToChangePassword"
      >
        Edit
      </van-button>
    </view>
	<view class="bottom-hint">
	  <text>Remember to save your changes.</text>
	</view>
  </view>
  
</template>

<script>
import { userApi } from '@/utils/api/user';
import { uploadApi } from '@/utils/api/upload';

export default {
  data() {
    return {
      editing: '',
      user: {},
      form: {
        name: '',
        email: '',
        phone: '',
        avatar: '',
      },
      defaultAvatar: '/static/settings/userp.jpg',
    };
  },
  onLoad() {
    this.loadUserInfo();
  },
  methods: {
   async loadUserInfo() {
     try {
       const userId = userApi.getUserId();
       console.log("üßæ Ëé∑ÂèñÂà∞ userId:", userId);
   
       if (!userId || userId === 0) {
         uni.showToast({ title: 'Áî®Êà∑Êú™ÁôªÂΩï', icon: 'none' });
         console.warn('‚ùå userId Êó†ÊïàÔºåÂèØËÉΩÊú™ÁôªÂΩïÊàñÊú¨Âú∞Êú™‰øùÂ≠òÁî®Êà∑‰ø°ÊÅØ');
         return;
       }
   
       const res = await userApi.getUserDetail(userId);
       console.log("üì¶ Áî®Êà∑ËØ¶ÊÉÖÊé•Âè£ÂìçÂ∫î:", res);
   
       if (res.code === 1 && res.data) {
         this.user = res.data;
         this.form.name = res.data.username || '';
         this.form.email = res.data.email || '';
         this.form.phone = res.data.phoneNumber || '';
         this.form.avatar = res.data.avatar_path || '';
         console.log('‚úÖ Áî®Êà∑Êï∞ÊçÆÂä†ËΩΩÊàêÂäü:', this.user);
       } else {
         console.error("‚ùå Âä†ËΩΩÂ§±Ë¥•ÔºåÂêéÁ´ØËøîÂõûÈîôËØØ:", res);
         uni.showToast({ title: `Âä†ËΩΩÂ§±Ë¥•Ôºö${res.msg || 'Êú™Áü•ÈîôËØØ'}`, icon: 'none' });
       }
     } catch (err) {
       console.error("üî• Âä†ËΩΩÁî®Êà∑‰ø°ÊÅØÂá∫Èîô:", err);
       uni.showToast({ title: 'ÁΩëÁªúËØ∑Ê±ÇÂ§±Ë¥•', icon: 'none' });
     }
   },

	async chooseAvatar() {
	  try {
	    const res = await uni.chooseImage({ count: 1 });
	    const filePath = res.tempFilePaths[0];
	
	    const userId = userApi.getUserId();
	
	    // üëâ ÁúüÊ≠£‰∏ä‰º†Â§¥ÂÉèÂà∞ÊúçÂä°Âô®
	    const uploadRes = await uploadApi.uploadAvatar(filePath, userId);
	
	    if (uploadRes.code === 1) {
	      const newAvatarUrl = uploadRes.data; // Êé•Âè£ËøîÂõû‰∏ä‰º†ÂêéÁöÑÂõæÁâáURL
	
	      // Êú¨Âú∞Êõ¥Êñ∞Â§¥ÂÉè
	      this.user.avatar_path = newAvatarUrl;
	      this.form.avatar = newAvatarUrl;
	
	      // Êõ¥Êñ∞Êú¨Âú∞ÁºìÂ≠ò
	      userApi.updateLocalUserInfo({ avatar_path: newAvatarUrl });
	
	      uni.showToast({ title: 'Â§¥ÂÉèÂ∑≤Êõ¥Êñ∞', icon: 'success' });
	    } else {
	      uni.showToast({ title: uploadRes.msg || 'Â§¥ÂÉè‰∏ä‰º†Â§±Ë¥•', icon: 'none' });
	    }
	  } catch (err) {
	    console.error('‚ùå ‰∏ä‰º†Â§¥ÂÉèÂá∫Èîô:', err);
	    uni.showToast({ title: '‰∏ä‰º†Â§±Ë¥•', icon: 'none' });
	  }
	},



    async toggleEdit(field) {
      if (this.editing === field) {
        // ‰øùÂ≠òÊìç‰Ωú
        const userId = userApi.getUserId();
        if (field === 'email' && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(this.form.email)) {
          uni.showToast({ title: 'Invalid email', icon: 'none' });
          return;
        }
        if (field === 'phone' && !/^\d{6,15}$/.test(this.form.phone)) {
          uni.showToast({ title: 'Invalid phone', icon: 'none' });
          return;
        }

        const dataMap = {
          name: { username: this.form.name },
          email: { email: this.form.email },
          phone: { phone_number: this.form.phone },
        };

        try {
          const res = await userApi.updateUserInfo(userId, dataMap[field]);
          if (res.code === 1) {
            this.user = res.data;
            userApi.updateLocalUserInfo(res.data);
            uni.showToast({ title: 'Updated', icon: 'success' });
          } else {
            uni.showToast({ title: 'Êõ¥Êñ∞Â§±Ë¥•', icon: 'none' });
          }
        } catch (e) {
          uni.showToast({ title: 'ËØ∑Ê±ÇÂ§±Ë¥•', icon: 'none' });
        }

        this.editing = '';
      } else {
        this.form[field] = field === 'name' ? this.user.username
                           : field === 'email' ? this.user.email
                           : this.user.phoneNumber;
        this.editing = field;
      }
    },

    goToChangePassword() {
      uni.navigateTo({ url: '/pages/settings/change_password/change_password' });
    },

    handleBack() {
      const pages = getCurrentPages();
      if (pages.length > 1) {
        uni.navigateBack();
      } else {
        uni.reLaunch({ url: '/pages/settings/my_settings/my_settings' });
      }
    },

    async updateField(key, value) {
      const userId = userApi.getUserId();
      const data = {};
      data[key] = value;
      const res = await userApi.updateUserInfo(userId, data);
      if (res.code === 1) {
        this.user = res.data;
      }
    },
  }
};
</script>


<style scoped>
.edit-profile-page {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  padding: 40rpx;
  background: linear-gradient(to bottom, #e0f0ff, #ffffff);
  box-sizing: border-box;
}



.back-btn{
  position: absolute;
  top: 25rpx;
  left: 30rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  background-color: #f4f8ff;
  border-radius: 25rpx;
  width: 80rpx;
  height: 80rpx;
}

.back-icon{
  font-size: 55rpx;  
  color: #0084ff;
}
.header {
  background-color: #ffffff;
  padding: 40rpx 0;
  text-align: center;
  border-radius: 20rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.header-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #007aff;
  text-align: center;
}

.page-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #007aff;
}

.avatar-section {
  text-align: center;
  margin-bottom: 60rpx;
}
.avatar-img {
  width: 160rpx;
  height: 160rpx;
  border-radius: 50%;
  object-fit: cover;
}
.avatar-label {
  display: block;
  font-size: 28rpx;
  color: #777;
  margin-top: 12rpx;
}

.form-item {
  background: rgba(255, 255, 255, 0.95);
  margin-bottom: 30rpx;
  padding: 30rpx;
  border-radius: 24rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  position: relative;
}
.label {
  font-size: 30rpx;
  font-weight: bold;
  margin-bottom: 10rpx;
  color: #333;
}

.value {
  font-size: 32rpx;
  color: #666;
  transition: color 0.3s;
}

.input {
  font-size: 32rpx;
  padding: 20rpx 0;
  border: none;
  border-bottom: 2rpx solid #007aff;
  width: 100%;
  background: transparent;
  color: #111;
  font-weight: 500;
  transition: border-color 0.3s;
}

.edit-btn {
  position: absolute;
  right: 30rpx;
  top: 40%;
  transform: translateY(-50%);
  font-size: 26rpx;
  padding: 0 20rpx;
  height: 56rpx;
  line-height: 56rpx;
  border-radius: 28rpx;
}

/* ‰øùÂ≠òÊåâÈíÆÁöÑÊñáÂ≠óÊ†∑ÂºèÂä†Âº∫ */
:deep(.van-button--success) {
  background: #007aff !important;
  color: #eef4ff !important;
  border: 1rpx solid #cce0ff !important;
  font-weight: 500;
}

/* ÁºñËæëÊåâÈíÆÊõ¥Ê∏ÖÁàΩ */
:deep(.van-button--primary) {
  background: #eef4ff !important;
  color: #007aff !important;
  border: 1rpx solid #cce0ff !important;
  font-weight: 500;
}

.edit-btn:active {
  opacity: 0.8;
  transform: translateY(-50%) scale(0.97);
}

.focused {
  border: 2rpx solid #007aff;
  background-color: #eaf5ff;
  box-shadow: 0 0 12rpx rgba(0, 122, 255, 0.15);
}

.avatar-form {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  padding: 30rpx;
  border-radius: 24rpx;
  background: rgba(255, 255, 255, 0.95);
  margin-top: 30rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}
.avatar-preview {
  width: 100rpx;
  height: 100rpx;
  border-radius: 50%;
  overflow: hidden;
  flex-shrink: 0;
}
.avatar-img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.bottom-hint {
  width: 100%;
  text-align: center;
  align-items: center;
  font-size: 28rpx;
  color: #888;
  padding: 40rpx 0;
  margin-top: auto;
}

</style>
