<template>
  <view class="edit-profile-page">
    <!-- 返回按钮 -->
	<view class="header">
		<view class="back-btn" @click="handleBack">
		 <van-icon name="arrow-left" class="back-icon"/>
		</view>
	  <text class="header-title">Edit Profile</text>
	</view>

    <!-- 头像区域 -->
    <!-- 头像显示与修改区域 -->
    <view class="form-item avatar-form">
      <view class="label">Avatar</view>
      <view class="avatar-preview" @click="chooseAvatar">
		<image
		  class="avatar-img"
		  :src="avatarSrc"
		  mode="aspectFill"
		/>
      </view>
    </view>


    <!-- 表单字段 -->
    <view class="form-item" :class="{ focused: editing === 'name' }">
      <view class="label">Name</view>
      <input v-if="editing === 'name'" v-model="form.name" class="input" placeholder="Enter name" />
      <view v-else class="value">{{ user.username }}</view>
      <van-button size="small" :type="editing === 'name' ? 'success' : 'primary'" class="edit-btn" @click="toggleEdit('name')">
        {{ editing === 'name' ? 'Save' : 'Edit' }}
      </van-button>
    </view>

    <view class="form-item" :class="{ focused: editing === 'email' }">
      <view class="label">Email</view>
      <input v-if="editing === 'email'" v-model="form.email" class="input" placeholder="Enter email" />
      <view v-else class="value">{{ user.email }}</view>
      <van-button size="small" :type="editing === 'email' ? 'success' : 'primary'" class="edit-btn" @click="toggleEdit('email')">
        {{ editing === 'email' ? 'Save' : 'Edit' }}
      </van-button>
    </view>

    <view class="form-item" :class="{ focused: editing === 'phone' }">
      <view class="label">Phone</view>
      <input v-if="editing === 'phone'" v-model="form.phone" class="input" placeholder="Enter phone" />
      <view v-else class="value">{{ user.phoneNumber }}</view>
      <van-button size="small" :type="editing === 'phone' ? 'success' : 'primary'" class="edit-btn" @click="toggleEdit('phone')">
        {{ editing === 'phone' ? 'Save' : 'Edit' }}
      </van-button>
    </view>

    <view class="form-item">
      <view class="label">Password</view>
      <view class="value">************</view>
      <van-button
        size="small"
        type="primary"
        class="edit-btn"
        @click="goToChangePassword"
      >
        Edit
      </van-button>
    </view>
	<view class="bottom-hint">
	  <text>Remember to save your changes.</text>
	</view>
  </view>
  
</template>

<script>
import { userApi } from '@/utils/api/user';
import { uploadApi } from '@/utils/api/upload';

export default {
  data() {
    return {
      editing: '',
      user: {},
      avatar_path: '',
      form: {
        name: '',
        email: '',
        phone: '',
        avatar: '',
      },
      defaultAvatar: '/static/settings/userp.jpg',
    };
  },
  onLoad() {
    // Load cached data first to immediately show avatar and user info
    const cachedUser = userApi.getUserInfo();
    if (cachedUser) {
      this.user = cachedUser;
      this.form.name = cachedUser.username || '';
      this.form.email = cachedUser.email || '';
      this.form.phone = cachedUser.phoneNumber || '';
      this.form.avatar = cachedUser.avatar_path || '';
    }

    // Then fetch the latest data from the backend asynchronously
    this.loadUserInfo();
  },
  onShow() {
    this.loadUserInfo();
  },

  computed: {
    avatarSrc() {
      const path = this.user.avatar;
      console.log('🖼 avatar_path is:', path);
      return path && path.trim() !== '' ? path : this.defaultAvatar;
    }
  },
  methods: {
    async loadUserInfo() {
      try {
        const userId = userApi.getUserId();
        console.log("🧾 Retrieved userId:", userId);

        if (!userId || userId === 0) {
          uni.showToast({ title: 'Not logged in', icon: 'none' });
          console.warn('❌ Invalid userId, might not be logged in or cached info missing');
          return;
        }

        const res = await userApi.getUserDetail(userId);
        console.log("📦 User detail API response:", res);

        if (res.code === 1 && res.data) {
          this.user = res.data;
          this.form.name = res.data.username || '';
          this.form.email = res.data.email || '';
          this.form.phone = res.data.phoneNumber || '';
          
          // 获取头像路径
          const avatarPath = res.data.avatar_path || res.data.avatarPath;
          
          // 处理头像路径 - 与my_settings.uvue保持一致
          if (avatarPath && avatarPath.trim() !== '') {
            // 去除可能包含的localhost部分
            let cleanPath = avatarPath;
            
            // 移除可能的localhost前缀
            if (cleanPath.includes('localhost:8080')) {
              cleanPath = cleanPath.split('localhost:8080')[1];
            }
            
            // 检查各种路径可能性
            if (cleanPath.startsWith('/api/')) {
              this.user.avatar = 'https://khnrsggvzudb.sealoshzh.site' + cleanPath;
            } else if (cleanPath.startsWith('http') && !cleanPath.includes('localhost')) {
              // 已经是完整URL且不是localhost，直接使用
              this.user.avatar = cleanPath;
            } else {
              // 其他情况，添加基础URL
              // 确保没有多余的斜杠
              if (cleanPath.startsWith('/')) {
                this.user.avatar = 'https://khnrsggvzudb.sealoshzh.site' + cleanPath;
              } else {
                this.user.avatar = 'https://khnrsggvzudb.sealoshzh.site/' + cleanPath;
              }
            }
            
            this.form.avatar = this.user.avatar;
            console.log('处理后的头像URL:', this.user.avatar);
          } else {
            // 没有头像，使用默认头像
            this.user.avatar = this.defaultAvatar;
            this.form.avatar = this.defaultAvatar;
          }
          
          console.log('👤 Current user avatar path:', this.user.avatar);
          console.log('✅ User data loaded successfully:', this.user);
        } else {
          console.error("❌ Failed to load, backend returned error:", res);
          uni.showToast({ title: `Load failed: ${res.msg || 'Unknown error'}`, icon: 'none' });
        }
      } catch (err) {
        console.error("🔥 Error loading user info:", err);
        uni.showToast({ title: 'Network request failed', icon: 'none' });
      }
    },

    async chooseAvatar() {
      try {
        const res = await uni.chooseImage({ count: 1 });
        const filePath = res.tempFilePaths[0];

        const userId = userApi.getUserId();

        // 👉 Actually upload the avatar to server
        const uploadRes = await uploadApi.uploadAvatar(filePath, userId);

        if (uploadRes.code === 1) {
          let newAvatarUrl = uploadRes.data; // URL returned by API after upload
          
          // 处理新头像URL
          if (newAvatarUrl.includes('localhost:8080')) {
            newAvatarUrl = newAvatarUrl.split('localhost:8080')[1];
          }
          
          if (newAvatarUrl.startsWith('/api/')) {
            newAvatarUrl = 'https://khnrsggvzudb.sealoshzh.site' + newAvatarUrl;
          } else if (!newAvatarUrl.startsWith('http')) {
            newAvatarUrl = 'https://khnrsggvzudb.sealoshzh.site' + (newAvatarUrl.startsWith('/') ? '' : '/') + newAvatarUrl;
          }

          // Update avatar locally
          this.user.avatar_path = newAvatarUrl;
          this.user.avatar = newAvatarUrl; // ✅ Update displayed avatar
          this.form.avatar = newAvatarUrl;

          // Update local cache
          userApi.updateLocalUserInfo({ 
            avatar_path: newAvatarUrl,
            avatarPath: newAvatarUrl
          });

          uni.showToast({ title: 'Avatar updated', icon: 'success' });
        } else {
          uni.showToast({ title: uploadRes.msg || 'Avatar upload failed', icon: 'none' });
        }
      } catch (err) {
        console.error('❌ Avatar upload error:', err);
        uni.showToast({ title: 'Upload failed', icon: 'none' });
      }
    },

async toggleEdit(field) {
  if (this.editing === field) {
    // Save operation
    const userId = userApi.getUserId();

    if (field === 'email' && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(this.form.email)) {
      uni.showToast({ title: 'Invalid email', icon: 'none' });
      return;
    }

    if (field === 'phone' && !/^\d{6,15}$/.test(this.form.phone)) {
      uni.showToast({ title: 'Invalid phone', icon: 'none' });
      return;
    }

    const dataMap = {
      name: { username: this.form.name },
      email: { email: this.form.email },
      phone: { phone_number: this.form.phone },
    };

    try {
      const res = await userApi.updateUserInfo(userId, dataMap[field]);
      console.log('🧾 Update response:', res);

      if (res.code === 1) {
        this.user = res.data;
        userApi.updateLocalUserInfo(res.data);
        uni.showToast({ title: 'Updated successfully', icon: 'success' });
        this.editing = '';
      } else {
        const msg = res.msg?.toLowerCase() || '';
        if (msg.includes('exists') || msg.includes('already')) {
          uni.showToast({
            title: 'This value has been used, please try another',
            icon: 'none'
          });
        } else {
          uni.showToast({
            title: res.msg || 'Update failed',
            icon: 'none'
          });
        }
      }
    } catch (e) {
      console.error('❌ Update request failed:', e);
      uni.showToast({ title: 'Request failed', icon: 'none' });
    }

  } else {
    this.form[field] = field === 'name'
      ? this.user.username
      : field === 'email'
        ? this.user.email
        : this.user.phoneNumber;
    this.editing = field;
  }
},

    goToChangePassword() {
      uni.navigateTo({ url: '/pages/settings/change_password/change_password' });
    },

    handleBack() {
      const pages = getCurrentPages();
      if (pages.length > 1) {
        uni.navigateBack();
      } else {
        uni.reLaunch({ url: '/pages/settings/my_settings/my_settings' });
      }
    },

    async updateField(key, value) {
      const userId = userApi.getUserId();
      const data = {};
      data[key] = value;
      const res = await userApi.updateUserInfo(userId, data);
      if (res.code === 1) {
        this.user = res.data;
      }
    },
  }
};
</script>



<style scoped>
.edit-profile-page {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  padding: 40rpx;
  background: linear-gradient(to bottom, #e0f0ff, #ffffff);
  box-sizing: border-box;
}



.back-btn{
  position: absolute;
  top: 25rpx;
  left: 30rpx;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  z-index: 10;
  background-color: #f4f8ff;
  border-radius: 25rpx;
  width: 80rpx;
  height: 80rpx;
}

.back-icon{
  font-size: 55rpx;  
  color: #0084ff;
}
.header {
  background-color: #ffffff;
  padding: 40rpx 0;
  text-align: center;
  border-radius: 20rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.header-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #007aff;
  text-align: center;
}

.page-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #007aff;
}

.avatar-section {
  text-align: center;
  margin-bottom: 60rpx;
}
.avatar-img {
  width: 160rpx;
  height: 160rpx;
  border-radius: 50%;
  object-fit: cover;
}
.avatar-label {
  display: block;
  font-size: 28rpx;
  color: #777;
  margin-top: 12rpx;
}

.form-item {
  background: rgba(255, 255, 255, 0.95);
  margin-bottom: 30rpx;
  padding: 30rpx;
  border-radius: 24rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
  position: relative;
}
.label {
  font-size: 30rpx;
  font-weight: bold;
  margin-bottom: 10rpx;
  color: #333;
}

.value {
  font-size: 32rpx;
  color: #666;
  transition: color 0.3s;
}

.input {
  font-size: 32rpx;
  padding: 20rpx 0;
  border: none;
  border-bottom: 2rpx solid #007aff;
  width: 100%;
  background: transparent;
  color: #111;
  font-weight: 500;
  transition: border-color 0.3s;
}

.edit-btn {
  position: absolute;
  right: 30rpx;
  top: 40%;
  transform: translateY(-50%);
  font-size: 26rpx;
  padding: 0 20rpx;
  height: 56rpx;
  line-height: 56rpx;
  border-radius: 28rpx;
}

/* 保存按钮的文字样式加强 */
:deep(.van-button--success) {
  background: #007aff !important;
  color: #eef4ff !important;
  border: 1rpx solid #cce0ff !important;
  font-weight: 500;
}

/* 编辑按钮更清爽 */
:deep(.van-button--primary) {
  background: #eef4ff !important;
  color: #007aff !important;
  border: 1rpx solid #cce0ff !important;
  font-weight: 500;
}

.edit-btn:active {
  opacity: 0.8;
  transform: translateY(-50%) scale(0.97);
}

.focused {
  border: 2rpx solid #007aff;
  background-color: #eaf5ff;
  box-shadow: 0 0 12rpx rgba(0, 122, 255, 0.15);
}

.avatar-form {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: space-between;
  padding: 30rpx;
  border-radius: 24rpx;
  background: rgba(255, 255, 255, 0.95);
  margin-top: 30rpx;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}
.avatar-preview {
  width: 100rpx;
  height: 100rpx;
  border-radius: 50%;
  overflow: hidden;
  flex-shrink: 0;
}
.avatar-img {
  width: 100%;
  height: 100%;
  object-fit: cover;
}

.bottom-hint {
  width: 100%;
  text-align: center;
  align-items: center;
  font-size: 28rpx;
  color: #888;
  padding: 40rpx 0;
  margin-top: auto;
}

</style>
