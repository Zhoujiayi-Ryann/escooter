<template>
  <view class="container">

    <view class="mine-page">

      <!-- User Info -->
      <van-cell class="user-info" center>
        <template #icon>
          <van-image round width="60" height="60" :src="user.avatar" />
        </template>
        <template #title>
          <view>
            <view class="username">{{ user.name }}</view>
            <view class="userid">ID: {{ user.id }}</view>
          </view>
        </template>
      </van-cell>

      <!-- Membership Banner -->
      <van-notice-bar scrollable text="Member users will receive surprise benefits during holidays, and randomly drop out great value coupons! Up to £ 100 coupon, you can save more on riding!" />
	  <!-- Mileage -->
	  <view class="mileage-card">
	    <van-row gutter="20">
	      <van-col span="12" class="mileage-item">
	        <van-icon name="clock-o" class="mileage-icon" />
	        
	        <view class="mileage-label">Usage Hours</view>
			<view class="mileage-value">{{ mileage.hours }}</view>
	      </van-col>
	      <van-col span="12" class="mileage-item">
	        <van-icon name="balance-o" class="mileage-icon" />
	        
	        <view class="mileage-label">Total Spent</view>
			<view class="mileage-value">￡{{ mileage.spent.toFixed(2) }}</view>
	      </van-col>
	    </van-row>
	  </view>
      

      <!-- Bottom Section -->
      <view class="page-section">
		  <!-- Order Section -->
		  <van-grid :column-num="4" border>
		    <van-grid-item icon="orders-o" text="All Orders" @click="navigateTo('orders')" />
		    <van-grid-item icon="card" text="My Card" @click="navigateTo('card')" />
		    <van-grid-item icon="service-o" text="Help" @click="navigateTo('help')" />
		    <van-grid-item icon="bell" text="Notification" @click="navigateTo('notify')" />
		  </van-grid>



        <!-- Function List -->
        <van-cell-group class="function-group">
          <van-cell title="Add Card" is-link size="large" @click="goCard" />
          <van-cell title="Feedback" is-link size="large" @click="goFeedback" />
          <van-cell title="Edit Profile" is-link size="large" @click="gochange"/>
          <van-cell title="Log Out" is-link size="large" @click="handleLogout" />
        </van-cell-group>
		  

      </view>

      <!-- Bottom Tabbar -->
      <van-tabbar route fixed>
        <van-tabbar-item icon="home-o" to="/pages/home/home">Home</van-tabbar-item>
        <van-tabbar-item icon="user-o" to="/pages/settings/my_settings/my_settings" >Mine</van-tabbar-item>
      </van-tabbar>

    </view>

  </view>
</template>

<script>
import { userApi } from '../../../utils/api/user/index.uts';

export default {
  data() {
    return {
      user: {
        name: 'Guest',
        id: '0',
        avatar: ''
      },
      orderStatus: {
        unused: 1
      },
      mileage: {
        hours: 0,
        spent: 0
      }
    }
  },
  onLoad() {
    this.getUserInformation();
  },
  onShow() {
    // Refresh user information each time the page is shown to ensure up-to-date data
    this.getUserInformation();
  },
  methods: {
    async getUserInformation() {
      try {
        const userId = userApi.getUserId();
        if (!userId) {
          uni.showToast({ title: 'Not logged in', icon: 'none' });
          return;
        }
    
        // 拉取后端数据
        const res = await userApi.getUserDetail(userId);
        if (res.code === 1 && res.data) {
          const user = res.data;
    
          // 更新页面显示
          this.user.name = user.username || 'Guest';
          this.user.id = String(user.user_id || user.userId || 0);
    
          const avatarPath = user.avatar_path || user.avatarPath;
          
          // 处理头像路径 - 增强版
          if (avatarPath && avatarPath.trim() !== '') {
            // 去除可能包含的localhost部分
            let cleanPath = avatarPath;
            
            // 移除可能的localhost前缀
            if (cleanPath.includes('localhost:8080')) {
              cleanPath = cleanPath.split('localhost:8080')[1];
            }
            
            // 检查各种路径可能性
            if (cleanPath.startsWith('/api/')) {
              this.user.avatar = 'https://khnrsggvzudb.sealoshzh.site' + cleanPath;
            } else if (cleanPath.startsWith('http') && !cleanPath.includes('localhost')) {
              // 已经是完整URL且不是localhost，直接使用
              this.user.avatar = cleanPath;
            } else {
              // 其他情况，添加基础URL
              // 确保没有多余的斜杠
              if (cleanPath.startsWith('/')) {
                this.user.avatar = 'https://khnrsggvzudb.sealoshzh.site' + cleanPath;
              } else {
                this.user.avatar = 'https://khnrsggvzudb.sealoshzh.site/' + cleanPath;
              }
            }
            
            console.log('处理后的头像URL:', this.user.avatar);
          } else {
            // 没有头像，使用默认头像
            this.user.avatar = '/static/avatar/userp.jpg';
          }
    
          // 同步缓存 - 同时更新缓存中的头像URL
          // 重要：确保我们存储的是正确格式的URL
          if (user.avatar_path) {
            user.avatar_path = this.user.avatar;
          }
          if (user.avatarPath) {
            user.avatarPath = this.user.avatar;
          }
          
          userApi.updateLocalUserInfo(user);
          console.log('✅ Loaded user info from server:', this.user.avatar);
        } else {
          throw new Error(res.msg || 'Failed to load user');
        }
      } catch (e) {
        console.error('❌ Error loading user info:', e);
        // 回退缓存数据
        const cached = userApi.getUserInfo();
        if (cached) {
          this.user.name = cached.username;
          this.user.id = String(cached.user_id || cached.userId || 0);
          
          // 处理缓存中的头像路径 - 使用相同的逻辑
          const cachedAvatarPath = cached.avatar_path;
          if (cachedAvatarPath && cachedAvatarPath.trim() !== '') {
            let cleanPath = cachedAvatarPath;
            
            if (cleanPath.includes('localhost:8080')) {
              cleanPath = cleanPath.split('localhost:8080')[1];
            }
            
            if (cleanPath.startsWith('/api/')) {
              this.user.avatar = 'https://khnrsggvzudb.sealoshzh.site' + cleanPath;
            } else if (cleanPath.startsWith('http') && !cleanPath.includes('localhost')) {
              this.user.avatar = cleanPath;
            } else {
              if (cleanPath.startsWith('/')) {
                this.user.avatar = 'https://khnrsggvzudb.sealoshzh.site' + cleanPath;
              } else {
                this.user.avatar = 'https://khnrsggvzudb.sealoshzh.site/' + cleanPath;
              }
            }
          } else {
            this.user.avatar = '/static/avatar/userp.jpg';
          }
        }
      }
    },
    handleLogout() {
      // Call API to log out
      userApi.logout();

      // Show toast message
      uni.showToast({
        title: 'Logged out',
        icon: 'success'
      });

      // Reset user data to guest state
      this.user.name = 'Guest';
      this.user.id = '0';

      // Navigate to login page after delay
      setTimeout(() => {
        uni.navigateTo({
          url: '/pages/login/login'
        });
      }, 1500);
    },
    goCard() {
      uni.navigateTo({
        url: '/pages/settings/card/card'
      });
    },
    navigateTo(page) {
      const map = {
        orders: '/pages/settings/orders/orders',
        card: '/pages/cards/cards',
        help: '/pages/help/help',
        notify: '/pages/notification/notification'
      };

      if (map[page]) {
        uni.navigateTo({ url: map[page] });
      }
    },

    goFeedback() {
      uni.navigateTo({
        url: '/pages/feedback/feedback'
      });
    },
    gochange() {
      uni.navigateTo({
        url: '/pages/settings/change/change'
      });
    }
  }
}
</script>



<style scoped>

.mine-page {
  background: linear-gradient(
    to bottom,
    rgba(0, 123, 255, 0.2) 0%,   
    rgba(0, 123, 255, 0.1) 50%,  
    rgba(255, 255, 255, 0) 100%  
  );
  min-height: 100vh;
  padding: 20rpx;

  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  gap: 15rpx;
}

/* 用户信息 */
.user-info {
  margin-top: 100rpx;  
  border-radius: 24rpx;
  padding: 30rpx;
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.05);
  background: rgba(255,255,255,0.95) !important;
}

/* 用户文本 */
.username {
  font-size: 34rpx;
  font-weight: bold;
  color: #222;
  margin-left: 25rpx;
}
.userid {
  font-size: 26rpx;
  color: #777;
  margin-top: 6rpx;
  margin-left: 25rpx;
}

/* notice bar */
.van-notice-bar {
  margin-top: 10rpx;
  border-radius: 16rpx;
  height: 56rpx;
  font-size: 24rpx;
}

/* grid */
.van-grid {
  border-radius: 20rpx;
  overflow: hidden;  /* ✅ 裁剪圆角内的格子 */
  background: rgba(255,255,255,0.95);
  box-shadow: 0 4px 15px rgba(0,0,0,0.05);
}

.van-grid-item__content {
  padding: 35rpx 0;
}
.van-grid-item__icon {
  font-size: 44rpx !important;
}
.van-grid-item__content .van-grid-item__text {
  font-size: 12px !important;
}

/* 下半部分 */
.page-section {
  margin-top: 20rpx;   /* ✅ 控制整体下移 */
  display: flex;
  flex-direction: column;
  gap: 45rpx;
  font-size: 12px !important;
}

.mileage-card {
  border-radius: 20rpx;
  padding: 30rpx 0;
  background: rgba(255,255,255,0.95);
  box-shadow: 0 4px 12px rgba(0,0,0,0.05);
  margin-top: 10rpx;
}

.mileage-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.mileage-icon {
  font-size: 50rpx;
  color: #00cc66;
  margin-bottom: 10rpx;
}

.mileage-value {
  font-size: 32rpx;
  font-weight: bold;
  color: #333;
}

.mileage-label {
  font-size: 24rpx;
  color: #777;

}


.function-group {
  border-radius: 18rpx !important;
  margin-top: 20rpx;
  background: rgba(255,255,255,0.95);
  box-shadow: 0 4px 15px rgba(0,0,0,0.05);
  padding-left: 0 !important;
  padding-right: 0 !important;
  overflow: hidden;
}

/* cell 内部文字、间距 */
.function-group .van-cell {
  font-size: 30rpx !important;
  color: #333 !important;
  margin-bottom: 30rpx;
}

/* cell 点击 */
.function-group .van-cell::after {
  border-bottom: 1px solid rgba(0,0,0,0.05);
}

/* tabbar */
.van-tabbar {
  box-shadow: 0 -2px 12px rgba(0,0,0,0.05);
  height: 100rpx;
}

.van-tabbar-item {
  font-size: 26rpx;
}
.van-tabbar-item__icon {
  font-size: 38rpx;
}
.van-tabbar-item--active {
  color: #007aff !important;
}

/* badge */
.van-badge {
  transform: translate(5rpx,-5rpx);
}
</style>