<template>
  <view class="change-password-page">

    <!-- 返回按钮 -->
    <view class="close-btn" @click="goBack">
      <van-icon name="arrow-left" class="close-icon" />
    </view>

    <!-- 标题 -->
    <view class="header">
      <van-icon class="title-icon" name="lock" size="50" color="#007aff" />
      <text class="title">Change Password</text>
    </view>

    <!-- 当前密码 -->
    <view class="input-card" @click="focus('old')">
      <van-icon name="passed" size="20" />
      <input :type="showOld ? 'text' : 'password'" v-model="oldPassword" placeholder="Enter current password" readonly />
      <van-icon :name="showOld ? 'eye-o' : 'closed-eye'" @click.stop="toggle('old')" />
    </view>

    <!-- 新密码 -->
    <view class="input-card" @click="focus('new')">
      <van-icon name="edit" size="20" />
      <input :type="showNew ? 'text' : 'password'" v-model="newPassword" placeholder="Enter new password" readonly />
      <van-icon :name="showNew ? 'eye-o' : 'closed-eye'" @click.stop="toggle('new')" />
    </view>

    <!-- 确认密码 -->
    <view class="input-card" @click="focus('confirm')">
      <van-icon name="shield-o" size="20" />
      <input :type="showConfirm ? 'text' : 'password'" v-model="confirmPassword" placeholder="Confirm new password" readonly />
      <van-icon :name="showConfirm ? 'eye-o' : 'closed-eye'" @click.stop="toggle('confirm')" />
    </view>

    <!-- 提交按钮 -->
    <van-button class="save-btn" type="primary" block @click="submitChange" :loading="loading">
      Save New Password
    </van-button>

    <!-- 数字键盘 -->
    <van-number-keyboard
      :show="showKeyboard"
      extra-key="."
      close-button-text="Done"
      @input="onInput"
      @delete="onDelete"
      @blur="showKeyboard = false"
    />
  </view>
</template>

<script setup>
import { ref } from 'vue'
import { showToast } from 'vant'
import { userApi } from '@/utils/api/user'

const oldPassword = ref('')
const newPassword = ref('')
const confirmPassword = ref('')
const showOld = ref(false)
const showNew = ref(false)
const showConfirm = ref(false)

const showKeyboard = ref(false)
const currentField = ref('')
const loading = ref(false)

const focus = (field) => {
  currentField.value = field
  showKeyboard.value = true
}

const toggle = (field) => {
  if (field === 'old') showOld.value = !showOld.value
  if (field === 'new') showNew.value = !showNew.value
  if (field === 'confirm') showConfirm.value = !showConfirm.value
}

const onInput = (val) => {
  if (currentField.value === 'old' && oldPassword.value.length < 15) {
    oldPassword.value += val
  }
  if (currentField.value === 'new' && newPassword.value.length < 15) {
    newPassword.value += val
  }
  if (currentField.value === 'confirm' && confirmPassword.value.length < 15) {
    confirmPassword.value += val
  }
}

const onDelete = () => {
  if (currentField.value === 'old') oldPassword.value = oldPassword.value.slice(0, -1)
  if (currentField.value === 'new') newPassword.value = newPassword.value.slice(0, -1)
  if (currentField.value === 'confirm') confirmPassword.value = confirmPassword.value.slice(0, -1)
}

const submitChange = async () => {
  if (!oldPassword.value || !newPassword.value || !confirmPassword.value) {
    return showToast('Please complete all fields');
  }
  if (newPassword.value !== confirmPassword.value) {
    return showToast('Passwords do not match');
  }

  const userId = userApi.getUserId();
  if (!userId || isNaN(userId)) {
    return showToast('Not logged in');
  }

  loading.value = true;
  try {
    const res = await userApi.changePassword(userId, {
      oldPassword: oldPassword.value,
      newPassword: newPassword.value,
    });
    if (res.code === 1) {
      showToast('Password changed successfully');
      setTimeout(() => goBack(), 1500);
    } else {
      showToast(res.msg || 'Failed to change password');
    }
  } catch (err) {
    console.error('Change password error:', err);
    showToast('Network error');
  } finally {
    loading.value = false;
  }
};


const goBack = () => {
  const pages = getCurrentPages()
  if (pages.length > 1) uni.navigateBack()
  else uni.reLaunch({ url: '/pages/settings/change/change' })
}
</script>


<style>
	.change-password-page {
	  padding: 40rpx;
	  background: linear-gradient(to bottom, #e0f0ff, #ffffff);
	  min-height: 100vh;
	  display: flex;
	  flex-direction: column;
	}
	
	.close-btn {
	  position: absolute;
	  top: 50rpx;
	  left: 50rpx;
	  display: flex;
	  align-items: center;
	  justify-content: center;
	  z-index: 10;
	  background-color: #fff;
	  border-radius: 45rpx;
	  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
	  width: 90rpx;
	  height: 90rpx;
	}
	
	.close-icon {
	  font-size: 50rpx;
	  color: #3b88c3;
	}
	
	.header {
	  display: flex;
	  align-items: center;
	  margin-top: 120px;
	  margin-bottom: 100rpx;
	  gap:25rpx
	}
	
	.title {
	  font-size: 60rpx;
	  font-weight: bold;
	  margin-left: 20rpx;
	  color: #007aff;
	}
	
	.title-icon{
		font-size: 60rpx;
		font-weight: bold;
		margin-left: 20rpx;
		color: #007aff;
	}
	
	.input-card {
	  background: #fff;
	  border-radius: 50rpx;
	  padding: 40rpx;
	  display: flex;
	  flex-direction: row;
	  align-items: center;
	  justify-content: space-between;
	  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
	  margin-bottom: 30rpx;
	}
	
	.input-card input {
	  flex: 1;
	  margin: 0 20rpx;
	  font-size: 30rpx;
	  border: none;
	  outline: none;
	  background: transparent;
	}
	
	.save-btn {
	  margin-top: 40rpx;
	  height: 100rpx;
	  font-size: 30rpx;
	  background: linear-gradient(to right, #82b1ff, #007aff);
	  color: white;
	  border-radius: 70rpx;
	  box-shadow: 0 4px 10px rgba(0, 122, 255, 0.3);
	}

</style>